└── inta=0;intfoo(inta){returna*a;}intmain(){intb=2;intc=foo(a);returnc;} (compilation_unit)
    ├── inta=0; (declaration)
    │   └── inta=0; (variable_declaration)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a=0 (variable_definition)
    │       │   ├── a (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 0 (constant_initial_value)
    │       │       └── 0 (constant_expression)
    │       │           └── 0 (additive_expression)
    │       │               └── 0 (multiplicative_expression)
    │       │                   └── 0 (unary_expression)
    │       │                       └── 0 (primary_expression)
    │       │                           └── 0 (number)
    │       │                               └── 0 (IntegerConstant)
    │       └── ; (Semicolon)
    ├── intfoo(inta){returna*a;} (function_definition)
    │   ├── int (function_type)
    │   │   └── int (Int)
    │   ├── foo (Identifier)
    │   ├── ( (LeftParenthesis)
    │   ├── inta (function_formal_params)
    │   │   └── inta (function_formal_param)
    │   │       ├── int (basic_type)
    │   │       │   └── int (Int)
    │   │       └── a (Identifier)
    │   ├── ) (RightParenthesis)
    │   └── {returna*a;} (block)
    │       ├── { (LeftBrace)
    │       ├── returna*a; (block_item)
    │       │   └── returna*a; (statement)
    │       │       ├── return (Return)
    │       │       ├── a*a (expression)
    │       │       │   └── a*a (additive_expression)
    │       │       │       └── a*a (multiplicative_expression)
    │       │       │           ├── a (multiplicative_expression)
    │       │       │           │   └── a (unary_expression)
    │       │       │           │       └── a (primary_expression)
    │       │       │           │           └── a (left_value)
    │       │       │           │               └── a (Identifier)
    │       │       │           ├── * (Asterisk)
    │       │       │           └── a (unary_expression)
    │       │       │               └── a (primary_expression)
    │       │       │                   └── a (left_value)
    │       │       │                       └── a (Identifier)
    │       │       └── ; (Semicolon)
    │       └── } (RightBrace)
    └── intmain(){intb=2;intc=foo(a);returnc;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {intb=2;intc=foo(a);returnc;} (block)
            ├── { (LeftBrace)
            ├── intb=2; (block_item)
            │   └── intb=2; (declaration)
            │       └── intb=2; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── b=2 (variable_definition)
            │           │   ├── b (Identifier)
            │           │   ├── = (Equal)
            │           │   └── 2 (constant_initial_value)
            │           │       └── 2 (constant_expression)
            │           │           └── 2 (additive_expression)
            │           │               └── 2 (multiplicative_expression)
            │           │                   └── 2 (unary_expression)
            │           │                       └── 2 (primary_expression)
            │           │                           └── 2 (number)
            │           │                               └── 2 (IntegerConstant)
            │           └── ; (Semicolon)
            ├── intc=foo(a); (block_item)
            │   └── intc=foo(a); (declaration)
            │       └── intc=foo(a); (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── c=foo(a) (variable_definition)
            │           │   ├── c (Identifier)
            │           │   ├── = (Equal)
            │           │   └── foo(a) (constant_initial_value)
            │           │       └── foo(a) (constant_expression)
            │           │           └── foo(a) (additive_expression)
            │           │               └── foo(a) (multiplicative_expression)
            │           │                   └── foo(a) (unary_expression)
            │           │                       ├── foo (Identifier)
            │           │                       ├── ( (LeftParenthesis)
            │           │                       ├── a (function_real_params)
            │           │                       │   └── a (expression)
            │           │                       │       └── a (additive_expression)
            │           │                       │           └── a (multiplicative_expression)
            │           │                       │               └── a (unary_expression)
            │           │                       │                   └── a (primary_expression)
            │           │                       │                       └── a (left_value)
            │           │                       │                           └── a (Identifier)
            │           │                       └── ) (RightParenthesis)
            │           └── ; (Semicolon)
            ├── returnc; (block_item)
            │   └── returnc; (statement)
            │       ├── return (Return)
            │       ├── c (expression)
            │       │   └── c (additive_expression)
            │       │       └── c (multiplicative_expression)
            │       │           └── c (unary_expression)
            │       │               └── c (primary_expression)
            │       │                   └── c (left_value)
            │       │                       └── c (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 5) (Type: int)
  %2: foo (position: 17) (Function, Return Type: int) [Params: a (int), ]
  %3: main (position: 48) (Function, Return Type: int)
Children Scopes: 
  - Block_0
  - Block_1

Scope: Block_0
Identifiers: 
Children Scopes: 

Scope: Block_1
Identifiers: 
  %4: b (position: 61) (Type: int)
  %5: c (position: 78) (Type: int)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: inta=0;intfoo(inta){returna*a;}intmain(){intb=2;intc=foo(a);returnc;}
scope: null
parent: null
children: [
  1. declaration
  17. function_definition
  48. function_definition
]

1. declaration
cact_code: inta=0;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. variable_declaration
]

2. variable_declaration
cact_code: inta=0;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 1. declaration
children: [
  3. basic_type
  5. variable_definition
  16. Semicolon
]

3. basic_type
cact_code: int
scope: global
parent: 2. variable_declaration
children: [
  4. Int
]

4. Int
cact_code: int
scope: global
parent: 3. basic_type
children: []

5. variable_definition
cact_code: a=0
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 2. variable_declaration
children: [
  6. Identifier
  7. Equal
  8. constant_initial_value
]

6. Identifier
cact_code: a
scope: global
parent: 5. variable_definition
children: []

7. Equal
cact_code: =
scope: global
parent: 5. variable_definition
children: []

8. constant_initial_value
cact_code: 0
scope: global
parent: 5. variable_definition
children: [
  9. constant_expression
]

9. constant_expression
cact_code: 0
scope: global
parent: 8. constant_initial_value
children: [
  10. additive_expression
]

10. additive_expression
cact_code: 0
scope: global
parent: 9. constant_expression
children: [
  11. multiplicative_expression
]

11. multiplicative_expression
cact_code: 0
scope: global
parent: 10. additive_expression
children: [
  12. unary_expression
]

12. unary_expression
cact_code: 0
scope: global
parent: 11. multiplicative_expression
children: [
  13. primary_expression
]

13. primary_expression
cact_code: 0
scope: global
parent: 12. unary_expression
children: [
  14. number
]

14. number
cact_code: 0
scope: global
parent: 13. primary_expression
children: [
  15. IntegerConstant
]

15. IntegerConstant
cact_code: 0
scope: global
parent: 14. number
children: []

16. Semicolon
cact_code: ;
scope: global
parent: 2. variable_declaration
children: []

17. function_definition
cact_code: intfoo(inta){returna*a;}
scope: global
parent: 0. compilation_unit
children: [
  18. function_type
  20. Identifier
  21. LeftParenthesis
  22. function_formal_params
  27. RightParenthesis
  28. block
]

18. function_type
cact_code: int
scope: global
parent: 17. function_definition
children: [
  19. Int
]

19. Int
cact_code: int
scope: global
parent: 18. function_type
children: []

20. Identifier
cact_code: foo
scope: global
parent: 17. function_definition
children: []

21. LeftParenthesis
cact_code: (
scope: global
parent: 17. function_definition
children: []

22. function_formal_params
cact_code: inta
scope: global
parent: 17. function_definition
children: [
  23. function_formal_param
]

23. function_formal_param
cact_code: inta
scope: global
parent: 22. function_formal_params
children: [
  24. basic_type
  26. Identifier
]

24. basic_type
cact_code: int
scope: global
parent: 23. function_formal_param
children: [
  25. Int
]

25. Int
cact_code: int
scope: global
parent: 24. basic_type
children: []

26. Identifier
cact_code: a
scope: global
parent: 23. function_formal_param
children: []

27. RightParenthesis
cact_code: )
scope: global
parent: 17. function_definition
children: []

28. block
cact_code: {returna*a;}
scope: Block_0
parent: 17. function_definition
children: [
  29. LeftBrace
  30. block_item
  47. RightBrace
]

29. LeftBrace
cact_code: {
scope: Block_0
parent: 28. block
children: []

30. block_item
cact_code: returna*a;
scope: Block_0
parent: 28. block
children: [
  31. statement
]

31. statement
cact_code: returna*a;
scope: Block_0
parent: 30. block_item
children: [
  32. Return
  33. expression
  46. Semicolon
]

32. Return
cact_code: return
scope: Block_0
parent: 31. statement
children: []

33. expression
cact_code: a*a
scope: Block_0
parent: 31. statement
children: [
  34. additive_expression
]

34. additive_expression
cact_code: a*a
scope: Block_0
parent: 33. expression
children: [
  35. multiplicative_expression
]

35. multiplicative_expression
cact_code: a*a
scope: Block_0
parent: 34. additive_expression
children: [
  36. multiplicative_expression
  41. Asterisk
  42. unary_expression
]

36. multiplicative_expression
cact_code: a
scope: Block_0
parent: 35. multiplicative_expression
children: [
  37. unary_expression
]

37. unary_expression
cact_code: a
scope: Block_0
parent: 36. multiplicative_expression
children: [
  38. primary_expression
]

38. primary_expression
cact_code: a
scope: Block_0
parent: 37. unary_expression
children: [
  39. left_value
]

39. left_value
cact_code: a
scope: Block_0
parent: 38. primary_expression
children: [
  40. Identifier
]

40. Identifier
cact_code: a
scope: Block_0
parent: 39. left_value
children: []

41. Asterisk
cact_code: *
scope: Block_0
parent: 35. multiplicative_expression
children: []

42. unary_expression
cact_code: a
scope: Block_0
parent: 35. multiplicative_expression
children: [
  43. primary_expression
]

43. primary_expression
cact_code: a
scope: Block_0
parent: 42. unary_expression
children: [
  44. left_value
]

44. left_value
cact_code: a
scope: Block_0
parent: 43. primary_expression
children: [
  45. Identifier
]

45. Identifier
cact_code: a
scope: Block_0
parent: 44. left_value
children: []

46. Semicolon
cact_code: ;
scope: Block_0
parent: 31. statement
children: []

47. RightBrace
cact_code: }
scope: Block_0
parent: 28. block
children: []

48. function_definition
cact_code: intmain(){intb=2;intc=foo(a);returnc;}
scope: global
parent: 0. compilation_unit
children: [
  49. function_type
  51. Identifier
  52. LeftParenthesis
  53. RightParenthesis
  54. block
]

49. function_type
cact_code: int
scope: global
parent: 48. function_definition
children: [
  50. Int
]

50. Int
cact_code: int
scope: global
parent: 49. function_type
children: []

51. Identifier
cact_code: main
scope: global
parent: 48. function_definition
children: []

52. LeftParenthesis
cact_code: (
scope: global
parent: 48. function_definition
children: []

53. RightParenthesis
cact_code: )
scope: global
parent: 48. function_definition
children: []

54. block
cact_code: {intb=2;intc=foo(a);returnc;}
scope: Block_1
parent: 48. function_definition
children: [
  55. LeftBrace
  56. block_item
  73. block_item
  98. block_item
  109. RightBrace
]

55. LeftBrace
cact_code: {
scope: Block_1
parent: 54. block
children: []

56. block_item
cact_code: intb=2;
scope: Block_1
parent: 54. block
children: [
  57. declaration
]

57. declaration
cact_code: intb=2;
ir_code: 
--------------------
%4 = alloca i32, align 4
--------------------
scope: Block_1
parent: 56. block_item
children: [
  58. variable_declaration
]

58. variable_declaration
cact_code: intb=2;
ir_code: 
--------------------
%4 = alloca i32, align 4
--------------------
scope: Block_1
parent: 57. declaration
children: [
  59. basic_type
  61. variable_definition
  72. Semicolon
]

59. basic_type
cact_code: int
scope: Block_1
parent: 58. variable_declaration
children: [
  60. Int
]

60. Int
cact_code: int
scope: Block_1
parent: 59. basic_type
children: []

61. variable_definition
cact_code: b=2
ir_code: 
--------------------
%4 = alloca i32, align 4
--------------------
scope: Block_1
parent: 58. variable_declaration
children: [
  62. Identifier
  63. Equal
  64. constant_initial_value
]

62. Identifier
cact_code: b
scope: Block_1
parent: 61. variable_definition
children: []

63. Equal
cact_code: =
scope: Block_1
parent: 61. variable_definition
children: []

64. constant_initial_value
cact_code: 2
scope: Block_1
parent: 61. variable_definition
children: [
  65. constant_expression
]

65. constant_expression
cact_code: 2
scope: Block_1
parent: 64. constant_initial_value
children: [
  66. additive_expression
]

66. additive_expression
cact_code: 2
scope: Block_1
parent: 65. constant_expression
children: [
  67. multiplicative_expression
]

67. multiplicative_expression
cact_code: 2
scope: Block_1
parent: 66. additive_expression
children: [
  68. unary_expression
]

68. unary_expression
cact_code: 2
scope: Block_1
parent: 67. multiplicative_expression
children: [
  69. primary_expression
]

69. primary_expression
cact_code: 2
scope: Block_1
parent: 68. unary_expression
children: [
  70. number
]

70. number
cact_code: 2
scope: Block_1
parent: 69. primary_expression
children: [
  71. IntegerConstant
]

71. IntegerConstant
cact_code: 2
scope: Block_1
parent: 70. number
children: []

72. Semicolon
cact_code: ;
scope: Block_1
parent: 58. variable_declaration
children: []

73. block_item
cact_code: intc=foo(a);
scope: Block_1
parent: 54. block
children: [
  74. declaration
]

74. declaration
cact_code: intc=foo(a);
ir_code: 
--------------------
%5 = alloca i32, align 4
--------------------
scope: Block_1
parent: 73. block_item
children: [
  75. variable_declaration
]

75. variable_declaration
cact_code: intc=foo(a);
ir_code: 
--------------------
%5 = alloca i32, align 4
--------------------
scope: Block_1
parent: 74. declaration
children: [
  76. basic_type
  78. variable_definition
  97. Semicolon
]

76. basic_type
cact_code: int
scope: Block_1
parent: 75. variable_declaration
children: [
  77. Int
]

77. Int
cact_code: int
scope: Block_1
parent: 76. basic_type
children: []

78. variable_definition
cact_code: c=foo(a)
ir_code: 
--------------------
%5 = alloca i32, align 4
--------------------
scope: Block_1
parent: 75. variable_declaration
children: [
  79. Identifier
  80. Equal
  81. constant_initial_value
]

79. Identifier
cact_code: c
scope: Block_1
parent: 78. variable_definition
children: []

80. Equal
cact_code: =
scope: Block_1
parent: 78. variable_definition
children: []

81. constant_initial_value
cact_code: foo(a)
scope: Block_1
parent: 78. variable_definition
children: [
  82. constant_expression
]

82. constant_expression
cact_code: foo(a)
scope: Block_1
parent: 81. constant_initial_value
children: [
  83. additive_expression
]

83. additive_expression
cact_code: foo(a)
scope: Block_1
parent: 82. constant_expression
children: [
  84. multiplicative_expression
]

84. multiplicative_expression
cact_code: foo(a)
scope: Block_1
parent: 83. additive_expression
children: [
  85. unary_expression
]

85. unary_expression
cact_code: foo(a)
scope: Block_1
parent: 84. multiplicative_expression
children: [
  86. Identifier
  87. LeftParenthesis
  88. function_real_params
  96. RightParenthesis
]

86. Identifier
cact_code: foo
scope: Block_1
parent: 85. unary_expression
children: []

87. LeftParenthesis
cact_code: (
scope: Block_1
parent: 85. unary_expression
children: []

88. function_real_params
cact_code: a
scope: Block_1
parent: 85. unary_expression
children: [
  89. expression
]

89. expression
cact_code: a
scope: Block_1
parent: 88. function_real_params
children: [
  90. additive_expression
]

90. additive_expression
cact_code: a
scope: Block_1
parent: 89. expression
children: [
  91. multiplicative_expression
]

91. multiplicative_expression
cact_code: a
scope: Block_1
parent: 90. additive_expression
children: [
  92. unary_expression
]

92. unary_expression
cact_code: a
scope: Block_1
parent: 91. multiplicative_expression
children: [
  93. primary_expression
]

93. primary_expression
cact_code: a
scope: Block_1
parent: 92. unary_expression
children: [
  94. left_value
]

94. left_value
cact_code: a
scope: Block_1
parent: 93. primary_expression
children: [
  95. Identifier
]

95. Identifier
cact_code: a
scope: Block_1
parent: 94. left_value
children: []

96. RightParenthesis
cact_code: )
scope: Block_1
parent: 85. unary_expression
children: []

97. Semicolon
cact_code: ;
scope: Block_1
parent: 75. variable_declaration
children: []

98. block_item
cact_code: returnc;
scope: Block_1
parent: 54. block
children: [
  99. statement
]

99. statement
cact_code: returnc;
scope: Block_1
parent: 98. block_item
children: [
  100. Return
  101. expression
  108. Semicolon
]

100. Return
cact_code: return
scope: Block_1
parent: 99. statement
children: []

101. expression
cact_code: c
scope: Block_1
parent: 99. statement
children: [
  102. additive_expression
]

102. additive_expression
cact_code: c
scope: Block_1
parent: 101. expression
children: [
  103. multiplicative_expression
]

103. multiplicative_expression
cact_code: c
scope: Block_1
parent: 102. additive_expression
children: [
  104. unary_expression
]

104. unary_expression
cact_code: c
scope: Block_1
parent: 103. multiplicative_expression
children: [
  105. primary_expression
]

105. primary_expression
cact_code: c
scope: Block_1
parent: 104. unary_expression
children: [
  106. left_value
]

106. left_value
cact_code: c
scope: Block_1
parent: 105. primary_expression
children: [
  107. Identifier
]

107. Identifier
cact_code: c
scope: Block_1
parent: 106. left_value
children: []

108. Semicolon
cact_code: ;
scope: Block_1
parent: 99. statement
children: []

109. RightBrace
cact_code: }
scope: Block_1
parent: 54. block
children: []

