└── inta=2;intfoo(inta,intb[][3]){returna;}intmain(){returna;} (compilation_unit)
    ├── inta=2; (declaration)
    │   └── inta=2; (variable_declaration)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a=2 (variable_definition)
    │       │   ├── a (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 2 (constant_initial_value)
    │       │       └── 2 (constant_expression)
    │       │           └── 2 (additive_expression)
    │       │               └── 2 (multiplicative_expression)
    │       │                   └── 2 (unary_expression)
    │       │                       └── 2 (primary_expression)
    │       │                           └── 2 (number)
    │       │                               └── 2 (IntegerConstant)
    │       └── ; (Semicolon)
    ├── intfoo(inta,intb[][3]){returna;} (function_definition)
    │   ├── int (function_type)
    │   │   └── int (Int)
    │   ├── foo (Identifier)
    │   ├── ( (LeftParenthesis)
    │   ├── inta,intb[][3] (function_formal_params)
    │   │   ├── inta (function_formal_param)
    │   │   │   ├── int (basic_type)
    │   │   │   │   └── int (Int)
    │   │   │   └── a (Identifier)
    │   │   ├── , (Comma)
    │   │   └── intb[][3] (function_formal_param)
    │   │       ├── int (basic_type)
    │   │       │   └── int (Int)
    │   │       ├── b (Identifier)
    │   │       ├── [ (LeftBracket)
    │   │       ├── ] (RightBracket)
    │   │       ├── [ (LeftBracket)
    │   │       ├── 3 (IntegerConstant)
    │   │       └── ] (RightBracket)
    │   ├── ) (RightParenthesis)
    │   └── {returna;} (block)
    │       ├── { (LeftBrace)
    │       ├── returna; (block_item)
    │       │   └── returna; (statement)
    │       │       ├── return (Return)
    │       │       ├── a (expression)
    │       │       │   └── a (additive_expression)
    │       │       │       └── a (multiplicative_expression)
    │       │       │           └── a (unary_expression)
    │       │       │               └── a (primary_expression)
    │       │       │                   └── a (left_value)
    │       │       │                       └── a (Identifier)
    │       │       └── ; (Semicolon)
    │       └── } (RightBrace)
    └── intmain(){returna;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {returna;} (block)
            ├── { (LeftBrace)
            ├── returna; (block_item)
            │   └── returna; (statement)
            │       ├── return (Return)
            │       ├── a (expression)
            │       │   └── a (additive_expression)
            │       │       └── a (multiplicative_expression)
            │       │           └── a (unary_expression)
            │       │               └── a (primary_expression)
            │       │                   └── a (left_value)
            │       │                       └── a (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 5) (Type: int)
  %2: foo (position: 17) (Function, Return Type: int) [Params: a (int), b (int[][3]), ]
  %3: main (position: 52) (Function, Return Type: int)
Children Scopes: 
  - Block_0
  - Block_1

Scope: Block_0
Identifiers: 
Children Scopes: 

Scope: Block_1
Identifiers: 
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: inta=2;intfoo(inta,intb[][3]){returna;}intmain(){returna;}
scope: null
parent: null
children: [
  1. declaration
  17. function_definition
  52. function_definition
]

1. declaration
cact_code: inta=2;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. variable_declaration
]

2. variable_declaration
cact_code: inta=2;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 1. declaration
children: [
  3. basic_type
  5. variable_definition
  16. Semicolon
]

3. basic_type
cact_code: int
scope: global
parent: 2. variable_declaration
children: [
  4. Int
]

4. Int
cact_code: int
scope: global
parent: 3. basic_type
children: []

5. variable_definition
cact_code: a=2
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 2. variable_declaration
children: [
  6. Identifier
  7. Equal
  8. constant_initial_value
]

6. Identifier
cact_code: a
scope: global
parent: 5. variable_definition
children: []

7. Equal
cact_code: =
scope: global
parent: 5. variable_definition
children: []

8. constant_initial_value
cact_code: 2
scope: global
parent: 5. variable_definition
children: [
  9. constant_expression
]

9. constant_expression
cact_code: 2
scope: global
parent: 8. constant_initial_value
children: [
  10. additive_expression
]

10. additive_expression
cact_code: 2
scope: global
parent: 9. constant_expression
children: [
  11. multiplicative_expression
]

11. multiplicative_expression
cact_code: 2
scope: global
parent: 10. additive_expression
children: [
  12. unary_expression
]

12. unary_expression
cact_code: 2
scope: global
parent: 11. multiplicative_expression
children: [
  13. primary_expression
]

13. primary_expression
cact_code: 2
scope: global
parent: 12. unary_expression
children: [
  14. number
]

14. number
cact_code: 2
scope: global
parent: 13. primary_expression
children: [
  15. IntegerConstant
]

15. IntegerConstant
cact_code: 2
scope: global
parent: 14. number
children: []

16. Semicolon
cact_code: ;
scope: global
parent: 2. variable_declaration
children: []

17. function_definition
cact_code: intfoo(inta,intb[][3]){returna;}
scope: global
parent: 0. compilation_unit
children: [
  18. function_type
  20. Identifier
  21. LeftParenthesis
  22. function_formal_params
  37. RightParenthesis
  38. block
]

18. function_type
cact_code: int
scope: global
parent: 17. function_definition
children: [
  19. Int
]

19. Int
cact_code: int
scope: global
parent: 18. function_type
children: []

20. Identifier
cact_code: foo
scope: global
parent: 17. function_definition
children: []

21. LeftParenthesis
cact_code: (
scope: global
parent: 17. function_definition
children: []

22. function_formal_params
cact_code: inta,intb[][3]
scope: global
parent: 17. function_definition
children: [
  23. function_formal_param
  27. Comma
  28. function_formal_param
]

23. function_formal_param
cact_code: inta
scope: global
parent: 22. function_formal_params
children: [
  24. basic_type
  26. Identifier
]

24. basic_type
cact_code: int
scope: global
parent: 23. function_formal_param
children: [
  25. Int
]

25. Int
cact_code: int
scope: global
parent: 24. basic_type
children: []

26. Identifier
cact_code: a
scope: global
parent: 23. function_formal_param
children: []

27. Comma
cact_code: ,
scope: global
parent: 22. function_formal_params
children: []

28. function_formal_param
cact_code: intb[][3]
scope: global
parent: 22. function_formal_params
children: [
  29. basic_type
  31. Identifier
  32. LeftBracket
  33. RightBracket
  34. LeftBracket
  35. IntegerConstant
  36. RightBracket
]

29. basic_type
cact_code: int
scope: global
parent: 28. function_formal_param
children: [
  30. Int
]

30. Int
cact_code: int
scope: global
parent: 29. basic_type
children: []

31. Identifier
cact_code: b
scope: global
parent: 28. function_formal_param
children: []

32. LeftBracket
cact_code: [
scope: global
parent: 28. function_formal_param
children: []

33. RightBracket
cact_code: ]
scope: global
parent: 28. function_formal_param
children: []

34. LeftBracket
cact_code: [
scope: global
parent: 28. function_formal_param
children: []

35. IntegerConstant
cact_code: 3
scope: global
parent: 28. function_formal_param
children: []

36. RightBracket
cact_code: ]
scope: global
parent: 28. function_formal_param
children: []

37. RightParenthesis
cact_code: )
scope: global
parent: 17. function_definition
children: []

38. block
cact_code: {returna;}
scope: Block_0
parent: 17. function_definition
children: [
  39. LeftBrace
  40. block_item
  51. RightBrace
]

39. LeftBrace
cact_code: {
scope: Block_0
parent: 38. block
children: []

40. block_item
cact_code: returna;
scope: Block_0
parent: 38. block
children: [
  41. statement
]

41. statement
cact_code: returna;
scope: Block_0
parent: 40. block_item
children: [
  42. Return
  43. expression
  50. Semicolon
]

42. Return
cact_code: return
scope: Block_0
parent: 41. statement
children: []

43. expression
cact_code: a
scope: Block_0
parent: 41. statement
children: [
  44. additive_expression
]

44. additive_expression
cact_code: a
scope: Block_0
parent: 43. expression
children: [
  45. multiplicative_expression
]

45. multiplicative_expression
cact_code: a
scope: Block_0
parent: 44. additive_expression
children: [
  46. unary_expression
]

46. unary_expression
cact_code: a
scope: Block_0
parent: 45. multiplicative_expression
children: [
  47. primary_expression
]

47. primary_expression
cact_code: a
scope: Block_0
parent: 46. unary_expression
children: [
  48. left_value
]

48. left_value
cact_code: a
scope: Block_0
parent: 47. primary_expression
children: [
  49. Identifier
]

49. Identifier
cact_code: a
scope: Block_0
parent: 48. left_value
children: []

50. Semicolon
cact_code: ;
scope: Block_0
parent: 41. statement
children: []

51. RightBrace
cact_code: }
scope: Block_0
parent: 38. block
children: []

52. function_definition
cact_code: intmain(){returna;}
scope: global
parent: 0. compilation_unit
children: [
  53. function_type
  55. Identifier
  56. LeftParenthesis
  57. RightParenthesis
  58. block
]

53. function_type
cact_code: int
scope: global
parent: 52. function_definition
children: [
  54. Int
]

54. Int
cact_code: int
scope: global
parent: 53. function_type
children: []

55. Identifier
cact_code: main
scope: global
parent: 52. function_definition
children: []

56. LeftParenthesis
cact_code: (
scope: global
parent: 52. function_definition
children: []

57. RightParenthesis
cact_code: )
scope: global
parent: 52. function_definition
children: []

58. block
cact_code: {returna;}
scope: Block_1
parent: 52. function_definition
children: [
  59. LeftBrace
  60. block_item
  71. RightBrace
]

59. LeftBrace
cact_code: {
scope: Block_1
parent: 58. block
children: []

60. block_item
cact_code: returna;
scope: Block_1
parent: 58. block
children: [
  61. statement
]

61. statement
cact_code: returna;
scope: Block_1
parent: 60. block_item
children: [
  62. Return
  63. expression
  70. Semicolon
]

62. Return
cact_code: return
scope: Block_1
parent: 61. statement
children: []

63. expression
cact_code: a
scope: Block_1
parent: 61. statement
children: [
  64. additive_expression
]

64. additive_expression
cact_code: a
scope: Block_1
parent: 63. expression
children: [
  65. multiplicative_expression
]

65. multiplicative_expression
cact_code: a
scope: Block_1
parent: 64. additive_expression
children: [
  66. unary_expression
]

66. unary_expression
cact_code: a
scope: Block_1
parent: 65. multiplicative_expression
children: [
  67. primary_expression
]

67. primary_expression
cact_code: a
scope: Block_1
parent: 66. unary_expression
children: [
  68. left_value
]

68. left_value
cact_code: a
scope: Block_1
parent: 67. primary_expression
children: [
  69. Identifier
]

69. Identifier
cact_code: a
scope: Block_1
parent: 68. left_value
children: []

70. Semicolon
cact_code: ;
scope: Block_1
parent: 61. statement
children: []

71. RightBrace
cact_code: }
scope: Block_1
parent: 58. block
children: []

