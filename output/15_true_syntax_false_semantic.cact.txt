└── inta;intfunc1(inta){a=a-1;returna;}intmain(){intb;b=func2(a);returnb;} (compilation_unit)
    ├── inta; (declaration)
    │   └── inta; (variable_declaration)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a (variable_definition)
    │       │   └── a (Identifier)
    │       └── ; (Semicolon)
    ├── intfunc1(inta){a=a-1;returna;} (function_definition)
    │   ├── int (function_type)
    │   │   └── int (Int)
    │   ├── func1 (Identifier)
    │   ├── ( (LeftParenthesis)
    │   ├── inta (function_formal_params)
    │   │   └── inta (function_formal_param)
    │   │       ├── int (basic_type)
    │   │       │   └── int (Int)
    │   │       └── a (Identifier)
    │   ├── ) (RightParenthesis)
    │   └── {a=a-1;returna;} (block)
    │       ├── { (LeftBrace)
    │       ├── a=a-1; (block_item)
    │       │   └── a=a-1; (statement)
    │       │       ├── a (left_value)
    │       │       │   └── a (Identifier)
    │       │       ├── = (Equal)
    │       │       ├── a-1 (expression)
    │       │       │   └── a-1 (additive_expression)
    │       │       │       ├── a (additive_expression)
    │       │       │       │   └── a (multiplicative_expression)
    │       │       │       │       └── a (unary_expression)
    │       │       │       │           └── a (primary_expression)
    │       │       │       │               └── a (left_value)
    │       │       │       │                   └── a (Identifier)
    │       │       │       ├── - (Minus)
    │       │       │       └── 1 (multiplicative_expression)
    │       │       │           └── 1 (unary_expression)
    │       │       │               └── 1 (primary_expression)
    │       │       │                   └── 1 (number)
    │       │       │                       └── 1 (IntegerConstant)
    │       │       └── ; (Semicolon)
    │       ├── returna; (block_item)
    │       │   └── returna; (statement)
    │       │       ├── return (Return)
    │       │       ├── a (expression)
    │       │       │   └── a (additive_expression)
    │       │       │       └── a (multiplicative_expression)
    │       │       │           └── a (unary_expression)
    │       │       │               └── a (primary_expression)
    │       │       │                   └── a (left_value)
    │       │       │                       └── a (Identifier)
    │       │       └── ; (Semicolon)
    │       └── } (RightBrace)
    └── intmain(){intb;b=func2(a);returnb;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {intb;b=func2(a);returnb;} (block)
            ├── { (LeftBrace)
            ├── intb; (block_item)
            │   └── intb; (declaration)
            │       └── intb; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── b (variable_definition)
            │           │   └── b (Identifier)
            │           └── ; (Semicolon)
            ├── b=func2(a); (block_item)
            │   └── b=func2(a); (statement)
            │       ├── b (left_value)
            │       │   └── b (Identifier)
            │       ├── = (Equal)
            │       ├── func2(a) (expression)
            │       │   └── func2(a) (additive_expression)
            │       │       └── func2(a) (multiplicative_expression)
            │       │           └── func2(a) (unary_expression)
            │       │               ├── func2 (Identifier)
            │       │               ├── ( (LeftParenthesis)
            │       │               ├── a (function_real_params)
            │       │               │   └── a (expression)
            │       │               │       └── a (additive_expression)
            │       │               │           └── a (multiplicative_expression)
            │       │               │               └── a (unary_expression)
            │       │               │                   └── a (primary_expression)
            │       │               │                       └── a (left_value)
            │       │               │                           └── a (Identifier)
            │       │               └── ) (RightParenthesis)
            │       └── ; (Semicolon)
            ├── returnb; (block_item)
            │   └── returnb; (statement)
            │       ├── return (Return)
            │       ├── b (expression)
            │       │   └── b (additive_expression)
            │       │       └── b (multiplicative_expression)
            │       │           └── b (unary_expression)
            │       │               └── b (primary_expression)
            │       │                   └── b (left_value)
            │       │                       └── b (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 5) (Type: int)
  %2: func1 (position: 8) (Function, Return Type: int) [Params: a (int), ]
  %3: main (position: 53) (Function, Return Type: int)
Children Scopes: 
  - Block_0
  - Block_1

Scope: Block_0
Identifiers: 
Children Scopes: 

Scope: Block_1
Identifiers: 
  %4: b (position: 66) (Type: int)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: inta;intfunc1(inta){a=a-1;returna;}intmain(){intb;b=func2(a);returnb;}
scope: null
parent: null
children: [
  1. declaration
  8. function_definition
  53. function_definition
]

1. declaration
cact_code: inta;
ir_code: 
--------------------
%1 = alloca i32, align 4
store i32 0, ptr %1, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. variable_declaration
]

2. variable_declaration
cact_code: inta;
ir_code: 
--------------------
%1 = alloca i32, align 4
store i32 0, ptr %1, align 4
--------------------
scope: global
parent: 1. declaration
children: [
  3. basic_type
  5. variable_definition
  7. Semicolon
]

3. basic_type
cact_code: int
scope: global
parent: 2. variable_declaration
children: [
  4. Int
]

4. Int
cact_code: int
scope: global
parent: 3. basic_type
children: []

5. variable_definition
cact_code: a
ir_code: 
--------------------
%1 = alloca i32, align 4
store i32 0, ptr %1, align 4
--------------------
scope: global
parent: 2. variable_declaration
children: [
  6. Identifier
]

6. Identifier
cact_code: a
scope: global
parent: 5. variable_definition
children: []

7. Semicolon
cact_code: ;
scope: global
parent: 2. variable_declaration
children: []

8. function_definition
cact_code: intfunc1(inta){a=a-1;returna;}
scope: global
parent: 0. compilation_unit
children: [
  9. function_type
  11. Identifier
  12. LeftParenthesis
  13. function_formal_params
  18. RightParenthesis
  19. block
]

9. function_type
cact_code: int
scope: global
parent: 8. function_definition
children: [
  10. Int
]

10. Int
cact_code: int
scope: global
parent: 9. function_type
children: []

11. Identifier
cact_code: func1
scope: global
parent: 8. function_definition
children: []

12. LeftParenthesis
cact_code: (
scope: global
parent: 8. function_definition
children: []

13. function_formal_params
cact_code: inta
scope: global
parent: 8. function_definition
children: [
  14. function_formal_param
]

14. function_formal_param
cact_code: inta
scope: global
parent: 13. function_formal_params
children: [
  15. basic_type
  17. Identifier
]

15. basic_type
cact_code: int
scope: global
parent: 14. function_formal_param
children: [
  16. Int
]

16. Int
cact_code: int
scope: global
parent: 15. basic_type
children: []

17. Identifier
cact_code: a
scope: global
parent: 14. function_formal_param
children: []

18. RightParenthesis
cact_code: )
scope: global
parent: 8. function_definition
children: []

19. block
cact_code: {a=a-1;returna;}
scope: Block_0
parent: 8. function_definition
children: [
  20. LeftBrace
  21. block_item
  41. block_item
  52. RightBrace
]

20. LeftBrace
cact_code: {
scope: Block_0
parent: 19. block
children: []

21. block_item
cact_code: a=a-1;
scope: Block_0
parent: 19. block
children: [
  22. statement
]

22. statement
cact_code: a=a-1;
scope: Block_0
parent: 21. block_item
children: [
  23. left_value
  25. Equal
  26. expression
  40. Semicolon
]

23. left_value
cact_code: a
scope: Block_0
parent: 22. statement
children: [
  24. Identifier
]

24. Identifier
cact_code: a
scope: Block_0
parent: 23. left_value
children: []

25. Equal
cact_code: =
scope: Block_0
parent: 22. statement
children: []

26. expression
cact_code: a-1
scope: Block_0
parent: 22. statement
children: [
  27. additive_expression
]

27. additive_expression
cact_code: a-1
scope: Block_0
parent: 26. expression
children: [
  28. additive_expression
  34. Minus
  35. multiplicative_expression
]

28. additive_expression
cact_code: a
scope: Block_0
parent: 27. additive_expression
children: [
  29. multiplicative_expression
]

29. multiplicative_expression
cact_code: a
scope: Block_0
parent: 28. additive_expression
children: [
  30. unary_expression
]

30. unary_expression
cact_code: a
scope: Block_0
parent: 29. multiplicative_expression
children: [
  31. primary_expression
]

31. primary_expression
cact_code: a
scope: Block_0
parent: 30. unary_expression
children: [
  32. left_value
]

32. left_value
cact_code: a
scope: Block_0
parent: 31. primary_expression
children: [
  33. Identifier
]

33. Identifier
cact_code: a
scope: Block_0
parent: 32. left_value
children: []

34. Minus
cact_code: -
scope: Block_0
parent: 27. additive_expression
children: []

35. multiplicative_expression
cact_code: 1
scope: Block_0
parent: 27. additive_expression
children: [
  36. unary_expression
]

36. unary_expression
cact_code: 1
scope: Block_0
parent: 35. multiplicative_expression
children: [
  37. primary_expression
]

37. primary_expression
cact_code: 1
scope: Block_0
parent: 36. unary_expression
children: [
  38. number
]

38. number
cact_code: 1
scope: Block_0
parent: 37. primary_expression
children: [
  39. IntegerConstant
]

39. IntegerConstant
cact_code: 1
scope: Block_0
parent: 38. number
children: []

40. Semicolon
cact_code: ;
scope: Block_0
parent: 22. statement
children: []

41. block_item
cact_code: returna;
scope: Block_0
parent: 19. block
children: [
  42. statement
]

42. statement
cact_code: returna;
scope: Block_0
parent: 41. block_item
children: [
  43. Return
  44. expression
  51. Semicolon
]

43. Return
cact_code: return
scope: Block_0
parent: 42. statement
children: []

44. expression
cact_code: a
scope: Block_0
parent: 42. statement
children: [
  45. additive_expression
]

45. additive_expression
cact_code: a
scope: Block_0
parent: 44. expression
children: [
  46. multiplicative_expression
]

46. multiplicative_expression
cact_code: a
scope: Block_0
parent: 45. additive_expression
children: [
  47. unary_expression
]

47. unary_expression
cact_code: a
scope: Block_0
parent: 46. multiplicative_expression
children: [
  48. primary_expression
]

48. primary_expression
cact_code: a
scope: Block_0
parent: 47. unary_expression
children: [
  49. left_value
]

49. left_value
cact_code: a
scope: Block_0
parent: 48. primary_expression
children: [
  50. Identifier
]

50. Identifier
cact_code: a
scope: Block_0
parent: 49. left_value
children: []

51. Semicolon
cact_code: ;
scope: Block_0
parent: 42. statement
children: []

52. RightBrace
cact_code: }
scope: Block_0
parent: 19. block
children: []

53. function_definition
cact_code: intmain(){intb;b=func2(a);returnb;}
scope: global
parent: 0. compilation_unit
children: [
  54. function_type
  56. Identifier
  57. LeftParenthesis
  58. RightParenthesis
  59. block
]

54. function_type
cact_code: int
scope: global
parent: 53. function_definition
children: [
  55. Int
]

55. Int
cact_code: int
scope: global
parent: 54. function_type
children: []

56. Identifier
cact_code: main
scope: global
parent: 53. function_definition
children: []

57. LeftParenthesis
cact_code: (
scope: global
parent: 53. function_definition
children: []

58. RightParenthesis
cact_code: )
scope: global
parent: 53. function_definition
children: []

59. block
cact_code: {intb;b=func2(a);returnb;}
scope: Block_1
parent: 53. function_definition
children: [
  60. LeftBrace
  61. block_item
  69. block_item
  90. block_item
  101. RightBrace
]

60. LeftBrace
cact_code: {
scope: Block_1
parent: 59. block
children: []

61. block_item
cact_code: intb;
scope: Block_1
parent: 59. block
children: [
  62. declaration
]

62. declaration
cact_code: intb;
ir_code: 
--------------------
%4 = alloca i32, align 4
store i32 0, ptr %4, align 4
--------------------
scope: Block_1
parent: 61. block_item
children: [
  63. variable_declaration
]

63. variable_declaration
cact_code: intb;
ir_code: 
--------------------
%4 = alloca i32, align 4
store i32 0, ptr %4, align 4
--------------------
scope: Block_1
parent: 62. declaration
children: [
  64. basic_type
  66. variable_definition
  68. Semicolon
]

64. basic_type
cact_code: int
scope: Block_1
parent: 63. variable_declaration
children: [
  65. Int
]

65. Int
cact_code: int
scope: Block_1
parent: 64. basic_type
children: []

66. variable_definition
cact_code: b
ir_code: 
--------------------
%4 = alloca i32, align 4
store i32 0, ptr %4, align 4
--------------------
scope: Block_1
parent: 63. variable_declaration
children: [
  67. Identifier
]

67. Identifier
cact_code: b
scope: Block_1
parent: 66. variable_definition
children: []

68. Semicolon
cact_code: ;
scope: Block_1
parent: 63. variable_declaration
children: []

69. block_item
cact_code: b=func2(a);
scope: Block_1
parent: 59. block
children: [
  70. statement
]

70. statement
cact_code: b=func2(a);
scope: Block_1
parent: 69. block_item
children: [
  71. left_value
  73. Equal
  74. expression
  89. Semicolon
]

71. left_value
cact_code: b
scope: Block_1
parent: 70. statement
children: [
  72. Identifier
]

72. Identifier
cact_code: b
scope: Block_1
parent: 71. left_value
children: []

73. Equal
cact_code: =
scope: Block_1
parent: 70. statement
children: []

74. expression
cact_code: func2(a)
scope: Block_1
parent: 70. statement
children: [
  75. additive_expression
]

75. additive_expression
cact_code: func2(a)
scope: Block_1
parent: 74. expression
children: [
  76. multiplicative_expression
]

76. multiplicative_expression
cact_code: func2(a)
scope: Block_1
parent: 75. additive_expression
children: [
  77. unary_expression
]

77. unary_expression
cact_code: func2(a)
scope: Block_1
parent: 76. multiplicative_expression
children: [
  78. Identifier
  79. LeftParenthesis
  80. function_real_params
  88. RightParenthesis
]

78. Identifier
cact_code: func2
scope: Block_1
parent: 77. unary_expression
children: []

79. LeftParenthesis
cact_code: (
scope: Block_1
parent: 77. unary_expression
children: []

80. function_real_params
cact_code: a
scope: Block_1
parent: 77. unary_expression
children: [
  81. expression
]

81. expression
cact_code: a
scope: Block_1
parent: 80. function_real_params
children: [
  82. additive_expression
]

82. additive_expression
cact_code: a
scope: Block_1
parent: 81. expression
children: [
  83. multiplicative_expression
]

83. multiplicative_expression
cact_code: a
scope: Block_1
parent: 82. additive_expression
children: [
  84. unary_expression
]

84. unary_expression
cact_code: a
scope: Block_1
parent: 83. multiplicative_expression
children: [
  85. primary_expression
]

85. primary_expression
cact_code: a
scope: Block_1
parent: 84. unary_expression
children: [
  86. left_value
]

86. left_value
cact_code: a
scope: Block_1
parent: 85. primary_expression
children: [
  87. Identifier
]

87. Identifier
cact_code: a
scope: Block_1
parent: 86. left_value
children: []

88. RightParenthesis
cact_code: )
scope: Block_1
parent: 77. unary_expression
children: []

89. Semicolon
cact_code: ;
scope: Block_1
parent: 70. statement
children: []

90. block_item
cact_code: returnb;
scope: Block_1
parent: 59. block
children: [
  91. statement
]

91. statement
cact_code: returnb;
scope: Block_1
parent: 90. block_item
children: [
  92. Return
  93. expression
  100. Semicolon
]

92. Return
cact_code: return
scope: Block_1
parent: 91. statement
children: []

93. expression
cact_code: b
scope: Block_1
parent: 91. statement
children: [
  94. additive_expression
]

94. additive_expression
cact_code: b
scope: Block_1
parent: 93. expression
children: [
  95. multiplicative_expression
]

95. multiplicative_expression
cact_code: b
scope: Block_1
parent: 94. additive_expression
children: [
  96. unary_expression
]

96. unary_expression
cact_code: b
scope: Block_1
parent: 95. multiplicative_expression
children: [
  97. primary_expression
]

97. primary_expression
cact_code: b
scope: Block_1
parent: 96. unary_expression
children: [
  98. left_value
]

98. left_value
cact_code: b
scope: Block_1
parent: 97. primary_expression
children: [
  99. Identifier
]

99. Identifier
cact_code: b
scope: Block_1
parent: 98. left_value
children: []

100. Semicolon
cact_code: ;
scope: Block_1
parent: 91. statement
children: []

101. RightBrace
cact_code: }
scope: Block_1
parent: 59. block
children: []

