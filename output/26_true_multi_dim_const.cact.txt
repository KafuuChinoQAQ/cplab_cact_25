└── constfloata[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}};intmain(){print_float(a[0][0][0]);return0;} (compilation_unit)
    ├── constfloata[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}}; (declaration)
    │   └── constfloata[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}}; (constant_declaration)
    │       ├── const (Const)
    │       ├── float (basic_type)
    │       │   └── float (Float)
    │       ├── a[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}} (constant_definition)
    │       │   ├── a (Identifier)
    │       │   ├── [ (LeftBracket)
    │       │   ├── 1 (IntegerConstant)
    │       │   ├── ] (RightBracket)
    │       │   ├── [ (LeftBracket)
    │       │   ├── 2 (IntegerConstant)
    │       │   ├── ] (RightBracket)
    │       │   ├── [ (LeftBracket)
    │       │   ├── 2 (IntegerConstant)
    │       │   ├── ] (RightBracket)
    │       │   ├── = (Equal)
    │       │   └── {{{1.0f,2.0f},{.3f,4.0f}}} (constant_initial_value)
    │       │       ├── { (LeftBrace)
    │       │       ├── {{1.0f,2.0f},{.3f,4.0f}} (constant_initial_value)
    │       │       │   ├── { (LeftBrace)
    │       │       │   ├── {1.0f,2.0f} (constant_initial_value)
    │       │       │   │   ├── { (LeftBrace)
    │       │       │   │   ├── 1.0f (constant_initial_value)
    │       │       │   │   │   └── 1.0f (constant_expression)
    │       │       │   │   │       └── 1.0f (additive_expression)
    │       │       │   │   │           └── 1.0f (multiplicative_expression)
    │       │       │   │   │               └── 1.0f (unary_expression)
    │       │       │   │   │                   └── 1.0f (primary_expression)
    │       │       │   │   │                       └── 1.0f (number)
    │       │       │   │   │                           └── 1.0f (FloatConstant)
    │       │       │   │   ├── , (Comma)
    │       │       │   │   ├── 2.0f (constant_initial_value)
    │       │       │   │   │   └── 2.0f (constant_expression)
    │       │       │   │   │       └── 2.0f (additive_expression)
    │       │       │   │   │           └── 2.0f (multiplicative_expression)
    │       │       │   │   │               └── 2.0f (unary_expression)
    │       │       │   │   │                   └── 2.0f (primary_expression)
    │       │       │   │   │                       └── 2.0f (number)
    │       │       │   │   │                           └── 2.0f (FloatConstant)
    │       │       │   │   └── } (RightBrace)
    │       │       │   ├── , (Comma)
    │       │       │   ├── {.3f,4.0f} (constant_initial_value)
    │       │       │   │   ├── { (LeftBrace)
    │       │       │   │   ├── .3f (constant_initial_value)
    │       │       │   │   │   └── .3f (constant_expression)
    │       │       │   │   │       └── .3f (additive_expression)
    │       │       │   │   │           └── .3f (multiplicative_expression)
    │       │       │   │   │               └── .3f (unary_expression)
    │       │       │   │   │                   └── .3f (primary_expression)
    │       │       │   │   │                       └── .3f (number)
    │       │       │   │   │                           └── .3f (FloatConstant)
    │       │       │   │   ├── , (Comma)
    │       │       │   │   ├── 4.0f (constant_initial_value)
    │       │       │   │   │   └── 4.0f (constant_expression)
    │       │       │   │   │       └── 4.0f (additive_expression)
    │       │       │   │   │           └── 4.0f (multiplicative_expression)
    │       │       │   │   │               └── 4.0f (unary_expression)
    │       │       │   │   │                   └── 4.0f (primary_expression)
    │       │       │   │   │                       └── 4.0f (number)
    │       │       │   │   │                           └── 4.0f (FloatConstant)
    │       │       │   │   └── } (RightBrace)
    │       │       │   └── } (RightBrace)
    │       │       └── } (RightBrace)
    │       └── ; (Semicolon)
    └── intmain(){print_float(a[0][0][0]);return0;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {print_float(a[0][0][0]);return0;} (block)
            ├── { (LeftBrace)
            ├── print_float(a[0][0][0]); (block_item)
            │   └── print_float(a[0][0][0]); (statement)
            │       ├── print_float(a[0][0][0]) (expression)
            │       │   └── print_float(a[0][0][0]) (additive_expression)
            │       │       └── print_float(a[0][0][0]) (multiplicative_expression)
            │       │           └── print_float(a[0][0][0]) (unary_expression)
            │       │               ├── print_float (Identifier)
            │       │               ├── ( (LeftParenthesis)
            │       │               ├── a[0][0][0] (function_real_params)
            │       │               │   └── a[0][0][0] (expression)
            │       │               │       └── a[0][0][0] (additive_expression)
            │       │               │           └── a[0][0][0] (multiplicative_expression)
            │       │               │               └── a[0][0][0] (unary_expression)
            │       │               │                   └── a[0][0][0] (primary_expression)
            │       │               │                       └── a[0][0][0] (left_value)
            │       │               │                           ├── a (Identifier)
            │       │               │                           ├── [ (LeftBracket)
            │       │               │                           ├── 0 (expression)
            │       │               │                           │   └── 0 (additive_expression)
            │       │               │                           │       └── 0 (multiplicative_expression)
            │       │               │                           │           └── 0 (unary_expression)
            │       │               │                           │               └── 0 (primary_expression)
            │       │               │                           │                   └── 0 (number)
            │       │               │                           │                       └── 0 (IntegerConstant)
            │       │               │                           ├── ] (RightBracket)
            │       │               │                           ├── [ (LeftBracket)
            │       │               │                           ├── 0 (expression)
            │       │               │                           │   └── 0 (additive_expression)
            │       │               │                           │       └── 0 (multiplicative_expression)
            │       │               │                           │           └── 0 (unary_expression)
            │       │               │                           │               └── 0 (primary_expression)
            │       │               │                           │                   └── 0 (number)
            │       │               │                           │                       └── 0 (IntegerConstant)
            │       │               │                           ├── ] (RightBracket)
            │       │               │                           ├── [ (LeftBracket)
            │       │               │                           ├── 0 (expression)
            │       │               │                           │   └── 0 (additive_expression)
            │       │               │                           │       └── 0 (multiplicative_expression)
            │       │               │                           │           └── 0 (unary_expression)
            │       │               │                           │               └── 0 (primary_expression)
            │       │               │                           │                   └── 0 (number)
            │       │               │                           │                       └── 0 (IntegerConstant)
            │       │               │                           └── ] (RightBracket)
            │       │               └── ) (RightParenthesis)
            │       └── ; (Semicolon)
            ├── return0; (block_item)
            │   └── return0; (statement)
            │       ├── return (Return)
            │       ├── 0 (expression)
            │       │   └── 0 (additive_expression)
            │       │       └── 0 (multiplicative_expression)
            │       │           └── 0 (unary_expression)
            │       │               └── 0 (primary_expression)
            │       │                   └── 0 (number)
            │       │                       └── 0 (IntegerConstant)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 6) (Type: float[1][2][2])
  %2: main (position: 66) (Function, Return Type: int)
Children Scopes: 
  - Block_0

Scope: Block_0
Identifiers: 
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: constfloata[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}};intmain(){print_float(a[0][0][0]);return0;}
scope: null
parent: null
children: [
  1. declaration
  66. function_definition
]

1. declaration
cact_code: constfloata[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}};
ir_code: 
--------------------
%1 = alloca [1 x [2 x [2 x float]]], align 16
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. constant_declaration
]

2. constant_declaration
cact_code: constfloata[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}};
ir_code: 
--------------------
%1 = alloca [1 x [2 x [2 x float]]], align 16
--------------------
scope: global
parent: 1. declaration
children: [
  3. Const
  4. basic_type
  6. constant_definition
  65. Semicolon
]

3. Const
cact_code: const
scope: global
parent: 2. constant_declaration
children: []

4. basic_type
cact_code: float
scope: global
parent: 2. constant_declaration
children: [
  5. Float
]

5. Float
cact_code: float
scope: global
parent: 4. basic_type
children: []

6. constant_definition
cact_code: a[1][2][2]={{{1.0f,2.0f},{.3f,4.0f}}}
ir_code: 
--------------------
%1 = alloca [1 x [2 x [2 x float]]], align 16
--------------------
scope: global
parent: 2. constant_declaration
children: [
  7. Identifier
  8. LeftBracket
  9. IntegerConstant
  10. RightBracket
  11. LeftBracket
  12. IntegerConstant
  13. RightBracket
  14. LeftBracket
  15. IntegerConstant
  16. RightBracket
  17. Equal
  18. constant_initial_value
]

7. Identifier
cact_code: a
scope: global
parent: 6. constant_definition
children: []

8. LeftBracket
cact_code: [
scope: global
parent: 6. constant_definition
children: []

9. IntegerConstant
cact_code: 1
scope: global
parent: 6. constant_definition
children: []

10. RightBracket
cact_code: ]
scope: global
parent: 6. constant_definition
children: []

11. LeftBracket
cact_code: [
scope: global
parent: 6. constant_definition
children: []

12. IntegerConstant
cact_code: 2
scope: global
parent: 6. constant_definition
children: []

13. RightBracket
cact_code: ]
scope: global
parent: 6. constant_definition
children: []

14. LeftBracket
cact_code: [
scope: global
parent: 6. constant_definition
children: []

15. IntegerConstant
cact_code: 2
scope: global
parent: 6. constant_definition
children: []

16. RightBracket
cact_code: ]
scope: global
parent: 6. constant_definition
children: []

17. Equal
cact_code: =
scope: global
parent: 6. constant_definition
children: []

18. constant_initial_value
cact_code: {{{1.0f,2.0f},{.3f,4.0f}}}
scope: global
parent: 6. constant_definition
children: [
  19. LeftBrace
  20. constant_initial_value
  64. RightBrace
]

19. LeftBrace
cact_code: {
scope: global
parent: 18. constant_initial_value
children: []

20. constant_initial_value
cact_code: {{1.0f,2.0f},{.3f,4.0f}}
scope: global
parent: 18. constant_initial_value
children: [
  21. LeftBrace
  22. constant_initial_value
  42. Comma
  43. constant_initial_value
  63. RightBrace
]

21. LeftBrace
cact_code: {
scope: global
parent: 20. constant_initial_value
children: []

22. constant_initial_value
cact_code: {1.0f,2.0f}
scope: global
parent: 20. constant_initial_value
children: [
  23. LeftBrace
  24. constant_initial_value
  32. Comma
  33. constant_initial_value
  41. RightBrace
]

23. LeftBrace
cact_code: {
scope: global
parent: 22. constant_initial_value
children: []

24. constant_initial_value
cact_code: 1.0f
scope: global
parent: 22. constant_initial_value
children: [
  25. constant_expression
]

25. constant_expression
cact_code: 1.0f
scope: global
parent: 24. constant_initial_value
children: [
  26. additive_expression
]

26. additive_expression
cact_code: 1.0f
scope: global
parent: 25. constant_expression
children: [
  27. multiplicative_expression
]

27. multiplicative_expression
cact_code: 1.0f
scope: global
parent: 26. additive_expression
children: [
  28. unary_expression
]

28. unary_expression
cact_code: 1.0f
scope: global
parent: 27. multiplicative_expression
children: [
  29. primary_expression
]

29. primary_expression
cact_code: 1.0f
scope: global
parent: 28. unary_expression
children: [
  30. number
]

30. number
cact_code: 1.0f
scope: global
parent: 29. primary_expression
children: [
  31. FloatConstant
]

31. FloatConstant
cact_code: 1.0f
scope: global
parent: 30. number
children: []

32. Comma
cact_code: ,
scope: global
parent: 22. constant_initial_value
children: []

33. constant_initial_value
cact_code: 2.0f
scope: global
parent: 22. constant_initial_value
children: [
  34. constant_expression
]

34. constant_expression
cact_code: 2.0f
scope: global
parent: 33. constant_initial_value
children: [
  35. additive_expression
]

35. additive_expression
cact_code: 2.0f
scope: global
parent: 34. constant_expression
children: [
  36. multiplicative_expression
]

36. multiplicative_expression
cact_code: 2.0f
scope: global
parent: 35. additive_expression
children: [
  37. unary_expression
]

37. unary_expression
cact_code: 2.0f
scope: global
parent: 36. multiplicative_expression
children: [
  38. primary_expression
]

38. primary_expression
cact_code: 2.0f
scope: global
parent: 37. unary_expression
children: [
  39. number
]

39. number
cact_code: 2.0f
scope: global
parent: 38. primary_expression
children: [
  40. FloatConstant
]

40. FloatConstant
cact_code: 2.0f
scope: global
parent: 39. number
children: []

41. RightBrace
cact_code: }
scope: global
parent: 22. constant_initial_value
children: []

42. Comma
cact_code: ,
scope: global
parent: 20. constant_initial_value
children: []

43. constant_initial_value
cact_code: {.3f,4.0f}
scope: global
parent: 20. constant_initial_value
children: [
  44. LeftBrace
  45. constant_initial_value
  53. Comma
  54. constant_initial_value
  62. RightBrace
]

44. LeftBrace
cact_code: {
scope: global
parent: 43. constant_initial_value
children: []

45. constant_initial_value
cact_code: .3f
scope: global
parent: 43. constant_initial_value
children: [
  46. constant_expression
]

46. constant_expression
cact_code: .3f
scope: global
parent: 45. constant_initial_value
children: [
  47. additive_expression
]

47. additive_expression
cact_code: .3f
scope: global
parent: 46. constant_expression
children: [
  48. multiplicative_expression
]

48. multiplicative_expression
cact_code: .3f
scope: global
parent: 47. additive_expression
children: [
  49. unary_expression
]

49. unary_expression
cact_code: .3f
scope: global
parent: 48. multiplicative_expression
children: [
  50. primary_expression
]

50. primary_expression
cact_code: .3f
scope: global
parent: 49. unary_expression
children: [
  51. number
]

51. number
cact_code: .3f
scope: global
parent: 50. primary_expression
children: [
  52. FloatConstant
]

52. FloatConstant
cact_code: .3f
scope: global
parent: 51. number
children: []

53. Comma
cact_code: ,
scope: global
parent: 43. constant_initial_value
children: []

54. constant_initial_value
cact_code: 4.0f
scope: global
parent: 43. constant_initial_value
children: [
  55. constant_expression
]

55. constant_expression
cact_code: 4.0f
scope: global
parent: 54. constant_initial_value
children: [
  56. additive_expression
]

56. additive_expression
cact_code: 4.0f
scope: global
parent: 55. constant_expression
children: [
  57. multiplicative_expression
]

57. multiplicative_expression
cact_code: 4.0f
scope: global
parent: 56. additive_expression
children: [
  58. unary_expression
]

58. unary_expression
cact_code: 4.0f
scope: global
parent: 57. multiplicative_expression
children: [
  59. primary_expression
]

59. primary_expression
cact_code: 4.0f
scope: global
parent: 58. unary_expression
children: [
  60. number
]

60. number
cact_code: 4.0f
scope: global
parent: 59. primary_expression
children: [
  61. FloatConstant
]

61. FloatConstant
cact_code: 4.0f
scope: global
parent: 60. number
children: []

62. RightBrace
cact_code: }
scope: global
parent: 43. constant_initial_value
children: []

63. RightBrace
cact_code: }
scope: global
parent: 20. constant_initial_value
children: []

64. RightBrace
cact_code: }
scope: global
parent: 18. constant_initial_value
children: []

65. Semicolon
cact_code: ;
scope: global
parent: 2. constant_declaration
children: []

66. function_definition
cact_code: intmain(){print_float(a[0][0][0]);return0;}
scope: global
parent: 0. compilation_unit
children: [
  67. function_type
  69. Identifier
  70. LeftParenthesis
  71. RightParenthesis
  72. block
]

67. function_type
cact_code: int
scope: global
parent: 66. function_definition
children: [
  68. Int
]

68. Int
cact_code: int
scope: global
parent: 67. function_type
children: []

69. Identifier
cact_code: main
scope: global
parent: 66. function_definition
children: []

70. LeftParenthesis
cact_code: (
scope: global
parent: 66. function_definition
children: []

71. RightParenthesis
cact_code: )
scope: global
parent: 66. function_definition
children: []

72. block
cact_code: {print_float(a[0][0][0]);return0;}
scope: Block_0
parent: 66. function_definition
children: [
  73. LeftBrace
  74. block_item
  119. block_item
  130. RightBrace
]

73. LeftBrace
cact_code: {
scope: Block_0
parent: 72. block
children: []

74. block_item
cact_code: print_float(a[0][0][0]);
scope: Block_0
parent: 72. block
children: [
  75. statement
]

75. statement
cact_code: print_float(a[0][0][0]);
scope: Block_0
parent: 74. block_item
children: [
  76. expression
  118. Semicolon
]

76. expression
cact_code: print_float(a[0][0][0])
scope: Block_0
parent: 75. statement
children: [
  77. additive_expression
]

77. additive_expression
cact_code: print_float(a[0][0][0])
scope: Block_0
parent: 76. expression
children: [
  78. multiplicative_expression
]

78. multiplicative_expression
cact_code: print_float(a[0][0][0])
scope: Block_0
parent: 77. additive_expression
children: [
  79. unary_expression
]

79. unary_expression
cact_code: print_float(a[0][0][0])
scope: Block_0
parent: 78. multiplicative_expression
children: [
  80. Identifier
  81. LeftParenthesis
  82. function_real_params
  117. RightParenthesis
]

80. Identifier
cact_code: print_float
scope: Block_0
parent: 79. unary_expression
children: []

81. LeftParenthesis
cact_code: (
scope: Block_0
parent: 79. unary_expression
children: []

82. function_real_params
cact_code: a[0][0][0]
scope: Block_0
parent: 79. unary_expression
children: [
  83. expression
]

83. expression
cact_code: a[0][0][0]
scope: Block_0
parent: 82. function_real_params
children: [
  84. additive_expression
]

84. additive_expression
cact_code: a[0][0][0]
scope: Block_0
parent: 83. expression
children: [
  85. multiplicative_expression
]

85. multiplicative_expression
cact_code: a[0][0][0]
scope: Block_0
parent: 84. additive_expression
children: [
  86. unary_expression
]

86. unary_expression
cact_code: a[0][0][0]
scope: Block_0
parent: 85. multiplicative_expression
children: [
  87. primary_expression
]

87. primary_expression
cact_code: a[0][0][0]
scope: Block_0
parent: 86. unary_expression
children: [
  88. left_value
]

88. left_value
cact_code: a[0][0][0]
scope: Block_0
parent: 87. primary_expression
children: [
  89. Identifier
  90. LeftBracket
  91. expression
  98. RightBracket
  99. LeftBracket
  100. expression
  107. RightBracket
  108. LeftBracket
  109. expression
  116. RightBracket
]

89. Identifier
cact_code: a
scope: Block_0
parent: 88. left_value
children: []

90. LeftBracket
cact_code: [
scope: Block_0
parent: 88. left_value
children: []

91. expression
cact_code: 0
scope: Block_0
parent: 88. left_value
children: [
  92. additive_expression
]

92. additive_expression
cact_code: 0
scope: Block_0
parent: 91. expression
children: [
  93. multiplicative_expression
]

93. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 92. additive_expression
children: [
  94. unary_expression
]

94. unary_expression
cact_code: 0
scope: Block_0
parent: 93. multiplicative_expression
children: [
  95. primary_expression
]

95. primary_expression
cact_code: 0
scope: Block_0
parent: 94. unary_expression
children: [
  96. number
]

96. number
cact_code: 0
scope: Block_0
parent: 95. primary_expression
children: [
  97. IntegerConstant
]

97. IntegerConstant
cact_code: 0
scope: Block_0
parent: 96. number
children: []

98. RightBracket
cact_code: ]
scope: Block_0
parent: 88. left_value
children: []

99. LeftBracket
cact_code: [
scope: Block_0
parent: 88. left_value
children: []

100. expression
cact_code: 0
scope: Block_0
parent: 88. left_value
children: [
  101. additive_expression
]

101. additive_expression
cact_code: 0
scope: Block_0
parent: 100. expression
children: [
  102. multiplicative_expression
]

102. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 101. additive_expression
children: [
  103. unary_expression
]

103. unary_expression
cact_code: 0
scope: Block_0
parent: 102. multiplicative_expression
children: [
  104. primary_expression
]

104. primary_expression
cact_code: 0
scope: Block_0
parent: 103. unary_expression
children: [
  105. number
]

105. number
cact_code: 0
scope: Block_0
parent: 104. primary_expression
children: [
  106. IntegerConstant
]

106. IntegerConstant
cact_code: 0
scope: Block_0
parent: 105. number
children: []

107. RightBracket
cact_code: ]
scope: Block_0
parent: 88. left_value
children: []

108. LeftBracket
cact_code: [
scope: Block_0
parent: 88. left_value
children: []

109. expression
cact_code: 0
scope: Block_0
parent: 88. left_value
children: [
  110. additive_expression
]

110. additive_expression
cact_code: 0
scope: Block_0
parent: 109. expression
children: [
  111. multiplicative_expression
]

111. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 110. additive_expression
children: [
  112. unary_expression
]

112. unary_expression
cact_code: 0
scope: Block_0
parent: 111. multiplicative_expression
children: [
  113. primary_expression
]

113. primary_expression
cact_code: 0
scope: Block_0
parent: 112. unary_expression
children: [
  114. number
]

114. number
cact_code: 0
scope: Block_0
parent: 113. primary_expression
children: [
  115. IntegerConstant
]

115. IntegerConstant
cact_code: 0
scope: Block_0
parent: 114. number
children: []

116. RightBracket
cact_code: ]
scope: Block_0
parent: 88. left_value
children: []

117. RightParenthesis
cact_code: )
scope: Block_0
parent: 79. unary_expression
children: []

118. Semicolon
cact_code: ;
scope: Block_0
parent: 75. statement
children: []

119. block_item
cact_code: return0;
scope: Block_0
parent: 72. block
children: [
  120. statement
]

120. statement
cact_code: return0;
scope: Block_0
parent: 119. block_item
children: [
  121. Return
  122. expression
  129. Semicolon
]

121. Return
cact_code: return
scope: Block_0
parent: 120. statement
children: []

122. expression
cact_code: 0
scope: Block_0
parent: 120. statement
children: [
  123. additive_expression
]

123. additive_expression
cact_code: 0
scope: Block_0
parent: 122. expression
children: [
  124. multiplicative_expression
]

124. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 123. additive_expression
children: [
  125. unary_expression
]

125. unary_expression
cact_code: 0
scope: Block_0
parent: 124. multiplicative_expression
children: [
  126. primary_expression
]

126. primary_expression
cact_code: 0
scope: Block_0
parent: 125. unary_expression
children: [
  127. number
]

127. number
cact_code: 0
scope: Block_0
parent: 126. primary_expression
children: [
  128. IntegerConstant
]

128. IntegerConstant
cact_code: 0
scope: Block_0
parent: 127. number
children: []

129. Semicolon
cact_code: ;
scope: Block_0
parent: 120. statement
children: []

130. RightBrace
cact_code: }
scope: Block_0
parent: 72. block
children: []

