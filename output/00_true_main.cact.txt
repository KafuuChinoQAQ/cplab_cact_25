└── intmain(){inta=0;return0;} (compilation_unit)
    └── intmain(){inta=0;return0;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {inta=0;return0;} (block)
            ├── { (LeftBrace)
            ├── inta=0; (block_item)
            │   └── inta=0; (declaration)
            │       └── inta=0; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── a=0 (variable_definition)
            │           │   ├── a (Identifier)
            │           │   ├── = (Equal)
            │           │   └── 0 (constant_initial_value)
            │           │       └── 0 (constant_expression)
            │           │           └── 0 (additive_expression)
            │           │               └── 0 (multiplicative_expression)
            │           │                   └── 0 (unary_expression)
            │           │                       └── 0 (primary_expression)
            │           │                           └── 0 (number)
            │           │                               └── 0 (IntegerConstant)
            │           └── ; (Semicolon)
            ├── return0; (block_item)
            │   └── return0; (statement)
            │       ├── return (Return)
            │       ├── 0 (expression)
            │       │   └── 0 (additive_expression)
            │       │       └── 0 (multiplicative_expression)
            │       │           └── 0 (unary_expression)
            │       │               └── 0 (primary_expression)
            │       │                   └── 0 (number)
            │       │                       └── 0 (IntegerConstant)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: main (position: 1) (Function, Return Type: int)
Children Scopes: 
  - Block_0

Scope: Block_0
Identifiers: 
  %2: a (position: 14) (Type: int)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: intmain(){inta=0;return0;}
scope: null
parent: null
children: [
  1. function_definition
]

1. function_definition
cact_code: intmain(){inta=0;return0;}
scope: global
parent: 0. compilation_unit
children: [
  2. function_type
  4. Identifier
  5. LeftParenthesis
  6. RightParenthesis
  7. block
]

2. function_type
cact_code: int
scope: global
parent: 1. function_definition
children: [
  3. Int
]

3. Int
cact_code: int
scope: global
parent: 2. function_type
children: []

4. Identifier
cact_code: main
scope: global
parent: 1. function_definition
children: []

5. LeftParenthesis
cact_code: (
scope: global
parent: 1. function_definition
children: []

6. RightParenthesis
cact_code: )
scope: global
parent: 1. function_definition
children: []

7. block
cact_code: {inta=0;return0;}
scope: Block_0
parent: 1. function_definition
children: [
  8. LeftBrace
  9. block_item
  26. block_item
  37. RightBrace
]

8. LeftBrace
cact_code: {
scope: Block_0
parent: 7. block
children: []

9. block_item
cact_code: inta=0;
scope: Block_0
parent: 7. block
children: [
  10. declaration
]

10. declaration
cact_code: inta=0;
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: Block_0
parent: 9. block_item
children: [
  11. variable_declaration
]

11. variable_declaration
cact_code: inta=0;
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: Block_0
parent: 10. declaration
children: [
  12. basic_type
  14. variable_definition
  25. Semicolon
]

12. basic_type
cact_code: int
scope: Block_0
parent: 11. variable_declaration
children: [
  13. Int
]

13. Int
cact_code: int
scope: Block_0
parent: 12. basic_type
children: []

14. variable_definition
cact_code: a=0
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: Block_0
parent: 11. variable_declaration
children: [
  15. Identifier
  16. Equal
  17. constant_initial_value
]

15. Identifier
cact_code: a
scope: Block_0
parent: 14. variable_definition
children: []

16. Equal
cact_code: =
scope: Block_0
parent: 14. variable_definition
children: []

17. constant_initial_value
cact_code: 0
scope: Block_0
parent: 14. variable_definition
children: [
  18. constant_expression
]

18. constant_expression
cact_code: 0
scope: Block_0
parent: 17. constant_initial_value
children: [
  19. additive_expression
]

19. additive_expression
cact_code: 0
scope: Block_0
parent: 18. constant_expression
children: [
  20. multiplicative_expression
]

20. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 19. additive_expression
children: [
  21. unary_expression
]

21. unary_expression
cact_code: 0
scope: Block_0
parent: 20. multiplicative_expression
children: [
  22. primary_expression
]

22. primary_expression
cact_code: 0
scope: Block_0
parent: 21. unary_expression
children: [
  23. number
]

23. number
cact_code: 0
scope: Block_0
parent: 22. primary_expression
children: [
  24. IntegerConstant
]

24. IntegerConstant
cact_code: 0
scope: Block_0
parent: 23. number
children: []

25. Semicolon
cact_code: ;
scope: Block_0
parent: 11. variable_declaration
children: []

26. block_item
cact_code: return0;
scope: Block_0
parent: 7. block
children: [
  27. statement
]

27. statement
cact_code: return0;
scope: Block_0
parent: 26. block_item
children: [
  28. Return
  29. expression
  36. Semicolon
]

28. Return
cact_code: return
scope: Block_0
parent: 27. statement
children: []

29. expression
cact_code: 0
scope: Block_0
parent: 27. statement
children: [
  30. additive_expression
]

30. additive_expression
cact_code: 0
scope: Block_0
parent: 29. expression
children: [
  31. multiplicative_expression
]

31. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 30. additive_expression
children: [
  32. unary_expression
]

32. unary_expression
cact_code: 0
scope: Block_0
parent: 31. multiplicative_expression
children: [
  33. primary_expression
]

33. primary_expression
cact_code: 0
scope: Block_0
parent: 32. unary_expression
children: [
  34. number
]

34. number
cact_code: 0
scope: Block_0
parent: 33. primary_expression
children: [
  35. IntegerConstant
]

35. IntegerConstant
cact_code: 0
scope: Block_0
parent: 34. number
children: []

36. Semicolon
cact_code: ;
scope: Block_0
parent: 27. statement
children: []

37. RightBrace
cact_code: }
scope: Block_0
parent: 7. block
children: []

