└── inta=0,b=1;intfoo(inta,intb){returna*a;}intmain(){intc;c=foo(a,b);returnc;} (compilation_unit)
    ├── inta=0,b=1; (declaration)
    │   └── inta=0,b=1; (variable_declaration)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a=0 (variable_definition)
    │       │   ├── a (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 0 (constant_initial_value)
    │       │       └── 0 (constant_expression)
    │       │           └── 0 (additive_expression)
    │       │               └── 0 (multiplicative_expression)
    │       │                   └── 0 (unary_expression)
    │       │                       └── 0 (primary_expression)
    │       │                           └── 0 (number)
    │       │                               └── 0 (IntegerConstant)
    │       ├── , (Comma)
    │       ├── b=1 (variable_definition)
    │       │   ├── b (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 1 (constant_initial_value)
    │       │       └── 1 (constant_expression)
    │       │           └── 1 (additive_expression)
    │       │               └── 1 (multiplicative_expression)
    │       │                   └── 1 (unary_expression)
    │       │                       └── 1 (primary_expression)
    │       │                           └── 1 (number)
    │       │                               └── 1 (IntegerConstant)
    │       └── ; (Semicolon)
    ├── intfoo(inta,intb){returna*a;} (function_definition)
    │   ├── int (function_type)
    │   │   └── int (Int)
    │   ├── foo (Identifier)
    │   ├── ( (LeftParenthesis)
    │   ├── inta,intb (function_formal_params)
    │   │   ├── inta (function_formal_param)
    │   │   │   ├── int (basic_type)
    │   │   │   │   └── int (Int)
    │   │   │   └── a (Identifier)
    │   │   ├── , (Comma)
    │   │   └── intb (function_formal_param)
    │   │       ├── int (basic_type)
    │   │       │   └── int (Int)
    │   │       └── b (Identifier)
    │   ├── ) (RightParenthesis)
    │   └── {returna*a;} (block)
    │       ├── { (LeftBrace)
    │       ├── returna*a; (block_item)
    │       │   └── returna*a; (statement)
    │       │       ├── return (Return)
    │       │       ├── a*a (expression)
    │       │       │   └── a*a (additive_expression)
    │       │       │       └── a*a (multiplicative_expression)
    │       │       │           ├── a (multiplicative_expression)
    │       │       │           │   └── a (unary_expression)
    │       │       │           │       └── a (primary_expression)
    │       │       │           │           └── a (left_value)
    │       │       │           │               └── a (Identifier)
    │       │       │           ├── * (Asterisk)
    │       │       │           └── a (unary_expression)
    │       │       │               └── a (primary_expression)
    │       │       │                   └── a (left_value)
    │       │       │                       └── a (Identifier)
    │       │       └── ; (Semicolon)
    │       └── } (RightBrace)
    └── intmain(){intc;c=foo(a,b);returnc;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {intc;c=foo(a,b);returnc;} (block)
            ├── { (LeftBrace)
            ├── intc; (block_item)
            │   └── intc; (declaration)
            │       └── intc; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── c (variable_definition)
            │           │   └── c (Identifier)
            │           └── ; (Semicolon)
            ├── c=foo(a,b); (block_item)
            │   └── c=foo(a,b); (statement)
            │       ├── c (left_value)
            │       │   └── c (Identifier)
            │       ├── = (Equal)
            │       ├── foo(a,b) (expression)
            │       │   └── foo(a,b) (additive_expression)
            │       │       └── foo(a,b) (multiplicative_expression)
            │       │           └── foo(a,b) (unary_expression)
            │       │               ├── foo (Identifier)
            │       │               ├── ( (LeftParenthesis)
            │       │               ├── a,b (function_real_params)
            │       │               │   ├── a (expression)
            │       │               │   │   └── a (additive_expression)
            │       │               │   │       └── a (multiplicative_expression)
            │       │               │   │           └── a (unary_expression)
            │       │               │   │               └── a (primary_expression)
            │       │               │   │                   └── a (left_value)
            │       │               │   │                       └── a (Identifier)
            │       │               │   ├── , (Comma)
            │       │               │   └── b (expression)
            │       │               │       └── b (additive_expression)
            │       │               │           └── b (multiplicative_expression)
            │       │               │               └── b (unary_expression)
            │       │               │                   └── b (primary_expression)
            │       │               │                       └── b (left_value)
            │       │               │                           └── b (Identifier)
            │       │               └── ) (RightParenthesis)
            │       └── ; (Semicolon)
            ├── returnc; (block_item)
            │   └── returnc; (statement)
            │       ├── return (Return)
            │       ├── c (expression)
            │       │   └── c (additive_expression)
            │       │       └── c (multiplicative_expression)
            │       │           └── c (unary_expression)
            │       │               └── c (primary_expression)
            │       │                   └── c (left_value)
            │       │                       └── c (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 5) (Type: int)
  %2: b (position: 17) (Type: int)
  %3: foo (position: 29) (Function, Return Type: int) [Params: a (int), b (int), ]
  %4: main (position: 65) (Function, Return Type: int)
Children Scopes: 
  - Block_0
  - Block_1

Scope: Block_0
Identifiers: 
Children Scopes: 

Scope: Block_1
Identifiers: 
  %5: c (position: 78) (Type: int)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: inta=0,b=1;intfoo(inta,intb){returna*a;}intmain(){intc;c=foo(a,b);returnc;}
scope: null
parent: null
children: [
  1. declaration
  29. function_definition
  65. function_definition
]

1. declaration
cact_code: inta=0,b=1;
ir_code: 
--------------------
%1 = alloca i32, align 4
%2 = alloca i32, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. variable_declaration
]

2. variable_declaration
cact_code: inta=0,b=1;
ir_code: 
--------------------
%1 = alloca i32, align 4
%2 = alloca i32, align 4
--------------------
scope: global
parent: 1. declaration
children: [
  3. basic_type
  5. variable_definition
  16. Comma
  17. variable_definition
  28. Semicolon
]

3. basic_type
cact_code: int
scope: global
parent: 2. variable_declaration
children: [
  4. Int
]

4. Int
cact_code: int
scope: global
parent: 3. basic_type
children: []

5. variable_definition
cact_code: a=0
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 2. variable_declaration
children: [
  6. Identifier
  7. Equal
  8. constant_initial_value
]

6. Identifier
cact_code: a
scope: global
parent: 5. variable_definition
children: []

7. Equal
cact_code: =
scope: global
parent: 5. variable_definition
children: []

8. constant_initial_value
cact_code: 0
scope: global
parent: 5. variable_definition
children: [
  9. constant_expression
]

9. constant_expression
cact_code: 0
scope: global
parent: 8. constant_initial_value
children: [
  10. additive_expression
]

10. additive_expression
cact_code: 0
scope: global
parent: 9. constant_expression
children: [
  11. multiplicative_expression
]

11. multiplicative_expression
cact_code: 0
scope: global
parent: 10. additive_expression
children: [
  12. unary_expression
]

12. unary_expression
cact_code: 0
scope: global
parent: 11. multiplicative_expression
children: [
  13. primary_expression
]

13. primary_expression
cact_code: 0
scope: global
parent: 12. unary_expression
children: [
  14. number
]

14. number
cact_code: 0
scope: global
parent: 13. primary_expression
children: [
  15. IntegerConstant
]

15. IntegerConstant
cact_code: 0
scope: global
parent: 14. number
children: []

16. Comma
cact_code: ,
scope: global
parent: 2. variable_declaration
children: []

17. variable_definition
cact_code: b=1
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: global
parent: 2. variable_declaration
children: [
  18. Identifier
  19. Equal
  20. constant_initial_value
]

18. Identifier
cact_code: b
scope: global
parent: 17. variable_definition
children: []

19. Equal
cact_code: =
scope: global
parent: 17. variable_definition
children: []

20. constant_initial_value
cact_code: 1
scope: global
parent: 17. variable_definition
children: [
  21. constant_expression
]

21. constant_expression
cact_code: 1
scope: global
parent: 20. constant_initial_value
children: [
  22. additive_expression
]

22. additive_expression
cact_code: 1
scope: global
parent: 21. constant_expression
children: [
  23. multiplicative_expression
]

23. multiplicative_expression
cact_code: 1
scope: global
parent: 22. additive_expression
children: [
  24. unary_expression
]

24. unary_expression
cact_code: 1
scope: global
parent: 23. multiplicative_expression
children: [
  25. primary_expression
]

25. primary_expression
cact_code: 1
scope: global
parent: 24. unary_expression
children: [
  26. number
]

26. number
cact_code: 1
scope: global
parent: 25. primary_expression
children: [
  27. IntegerConstant
]

27. IntegerConstant
cact_code: 1
scope: global
parent: 26. number
children: []

28. Semicolon
cact_code: ;
scope: global
parent: 2. variable_declaration
children: []

29. function_definition
cact_code: intfoo(inta,intb){returna*a;}
scope: global
parent: 0. compilation_unit
children: [
  30. function_type
  32. Identifier
  33. LeftParenthesis
  34. function_formal_params
  44. RightParenthesis
  45. block
]

30. function_type
cact_code: int
scope: global
parent: 29. function_definition
children: [
  31. Int
]

31. Int
cact_code: int
scope: global
parent: 30. function_type
children: []

32. Identifier
cact_code: foo
scope: global
parent: 29. function_definition
children: []

33. LeftParenthesis
cact_code: (
scope: global
parent: 29. function_definition
children: []

34. function_formal_params
cact_code: inta,intb
scope: global
parent: 29. function_definition
children: [
  35. function_formal_param
  39. Comma
  40. function_formal_param
]

35. function_formal_param
cact_code: inta
scope: global
parent: 34. function_formal_params
children: [
  36. basic_type
  38. Identifier
]

36. basic_type
cact_code: int
scope: global
parent: 35. function_formal_param
children: [
  37. Int
]

37. Int
cact_code: int
scope: global
parent: 36. basic_type
children: []

38. Identifier
cact_code: a
scope: global
parent: 35. function_formal_param
children: []

39. Comma
cact_code: ,
scope: global
parent: 34. function_formal_params
children: []

40. function_formal_param
cact_code: intb
scope: global
parent: 34. function_formal_params
children: [
  41. basic_type
  43. Identifier
]

41. basic_type
cact_code: int
scope: global
parent: 40. function_formal_param
children: [
  42. Int
]

42. Int
cact_code: int
scope: global
parent: 41. basic_type
children: []

43. Identifier
cact_code: b
scope: global
parent: 40. function_formal_param
children: []

44. RightParenthesis
cact_code: )
scope: global
parent: 29. function_definition
children: []

45. block
cact_code: {returna*a;}
scope: Block_0
parent: 29. function_definition
children: [
  46. LeftBrace
  47. block_item
  64. RightBrace
]

46. LeftBrace
cact_code: {
scope: Block_0
parent: 45. block
children: []

47. block_item
cact_code: returna*a;
scope: Block_0
parent: 45. block
children: [
  48. statement
]

48. statement
cact_code: returna*a;
scope: Block_0
parent: 47. block_item
children: [
  49. Return
  50. expression
  63. Semicolon
]

49. Return
cact_code: return
scope: Block_0
parent: 48. statement
children: []

50. expression
cact_code: a*a
scope: Block_0
parent: 48. statement
children: [
  51. additive_expression
]

51. additive_expression
cact_code: a*a
scope: Block_0
parent: 50. expression
children: [
  52. multiplicative_expression
]

52. multiplicative_expression
cact_code: a*a
scope: Block_0
parent: 51. additive_expression
children: [
  53. multiplicative_expression
  58. Asterisk
  59. unary_expression
]

53. multiplicative_expression
cact_code: a
scope: Block_0
parent: 52. multiplicative_expression
children: [
  54. unary_expression
]

54. unary_expression
cact_code: a
scope: Block_0
parent: 53. multiplicative_expression
children: [
  55. primary_expression
]

55. primary_expression
cact_code: a
scope: Block_0
parent: 54. unary_expression
children: [
  56. left_value
]

56. left_value
cact_code: a
scope: Block_0
parent: 55. primary_expression
children: [
  57. Identifier
]

57. Identifier
cact_code: a
scope: Block_0
parent: 56. left_value
children: []

58. Asterisk
cact_code: *
scope: Block_0
parent: 52. multiplicative_expression
children: []

59. unary_expression
cact_code: a
scope: Block_0
parent: 52. multiplicative_expression
children: [
  60. primary_expression
]

60. primary_expression
cact_code: a
scope: Block_0
parent: 59. unary_expression
children: [
  61. left_value
]

61. left_value
cact_code: a
scope: Block_0
parent: 60. primary_expression
children: [
  62. Identifier
]

62. Identifier
cact_code: a
scope: Block_0
parent: 61. left_value
children: []

63. Semicolon
cact_code: ;
scope: Block_0
parent: 48. statement
children: []

64. RightBrace
cact_code: }
scope: Block_0
parent: 45. block
children: []

65. function_definition
cact_code: intmain(){intc;c=foo(a,b);returnc;}
scope: global
parent: 0. compilation_unit
children: [
  66. function_type
  68. Identifier
  69. LeftParenthesis
  70. RightParenthesis
  71. block
]

66. function_type
cact_code: int
scope: global
parent: 65. function_definition
children: [
  67. Int
]

67. Int
cact_code: int
scope: global
parent: 66. function_type
children: []

68. Identifier
cact_code: main
scope: global
parent: 65. function_definition
children: []

69. LeftParenthesis
cact_code: (
scope: global
parent: 65. function_definition
children: []

70. RightParenthesis
cact_code: )
scope: global
parent: 65. function_definition
children: []

71. block
cact_code: {intc;c=foo(a,b);returnc;}
scope: Block_1
parent: 65. function_definition
children: [
  72. LeftBrace
  73. block_item
  81. block_item
  110. block_item
  121. RightBrace
]

72. LeftBrace
cact_code: {
scope: Block_1
parent: 71. block
children: []

73. block_item
cact_code: intc;
scope: Block_1
parent: 71. block
children: [
  74. declaration
]

74. declaration
cact_code: intc;
ir_code: 
--------------------
%5 = alloca i32, align 4
store i32 0, ptr %5, align 4
--------------------
scope: Block_1
parent: 73. block_item
children: [
  75. variable_declaration
]

75. variable_declaration
cact_code: intc;
ir_code: 
--------------------
%5 = alloca i32, align 4
store i32 0, ptr %5, align 4
--------------------
scope: Block_1
parent: 74. declaration
children: [
  76. basic_type
  78. variable_definition
  80. Semicolon
]

76. basic_type
cact_code: int
scope: Block_1
parent: 75. variable_declaration
children: [
  77. Int
]

77. Int
cact_code: int
scope: Block_1
parent: 76. basic_type
children: []

78. variable_definition
cact_code: c
ir_code: 
--------------------
%5 = alloca i32, align 4
store i32 0, ptr %5, align 4
--------------------
scope: Block_1
parent: 75. variable_declaration
children: [
  79. Identifier
]

79. Identifier
cact_code: c
scope: Block_1
parent: 78. variable_definition
children: []

80. Semicolon
cact_code: ;
scope: Block_1
parent: 75. variable_declaration
children: []

81. block_item
cact_code: c=foo(a,b);
scope: Block_1
parent: 71. block
children: [
  82. statement
]

82. statement
cact_code: c=foo(a,b);
scope: Block_1
parent: 81. block_item
children: [
  83. left_value
  85. Equal
  86. expression
  109. Semicolon
]

83. left_value
cact_code: c
scope: Block_1
parent: 82. statement
children: [
  84. Identifier
]

84. Identifier
cact_code: c
scope: Block_1
parent: 83. left_value
children: []

85. Equal
cact_code: =
scope: Block_1
parent: 82. statement
children: []

86. expression
cact_code: foo(a,b)
scope: Block_1
parent: 82. statement
children: [
  87. additive_expression
]

87. additive_expression
cact_code: foo(a,b)
scope: Block_1
parent: 86. expression
children: [
  88. multiplicative_expression
]

88. multiplicative_expression
cact_code: foo(a,b)
scope: Block_1
parent: 87. additive_expression
children: [
  89. unary_expression
]

89. unary_expression
cact_code: foo(a,b)
scope: Block_1
parent: 88. multiplicative_expression
children: [
  90. Identifier
  91. LeftParenthesis
  92. function_real_params
  108. RightParenthesis
]

90. Identifier
cact_code: foo
scope: Block_1
parent: 89. unary_expression
children: []

91. LeftParenthesis
cact_code: (
scope: Block_1
parent: 89. unary_expression
children: []

92. function_real_params
cact_code: a,b
scope: Block_1
parent: 89. unary_expression
children: [
  93. expression
  100. Comma
  101. expression
]

93. expression
cact_code: a
scope: Block_1
parent: 92. function_real_params
children: [
  94. additive_expression
]

94. additive_expression
cact_code: a
scope: Block_1
parent: 93. expression
children: [
  95. multiplicative_expression
]

95. multiplicative_expression
cact_code: a
scope: Block_1
parent: 94. additive_expression
children: [
  96. unary_expression
]

96. unary_expression
cact_code: a
scope: Block_1
parent: 95. multiplicative_expression
children: [
  97. primary_expression
]

97. primary_expression
cact_code: a
scope: Block_1
parent: 96. unary_expression
children: [
  98. left_value
]

98. left_value
cact_code: a
scope: Block_1
parent: 97. primary_expression
children: [
  99. Identifier
]

99. Identifier
cact_code: a
scope: Block_1
parent: 98. left_value
children: []

100. Comma
cact_code: ,
scope: Block_1
parent: 92. function_real_params
children: []

101. expression
cact_code: b
scope: Block_1
parent: 92. function_real_params
children: [
  102. additive_expression
]

102. additive_expression
cact_code: b
scope: Block_1
parent: 101. expression
children: [
  103. multiplicative_expression
]

103. multiplicative_expression
cact_code: b
scope: Block_1
parent: 102. additive_expression
children: [
  104. unary_expression
]

104. unary_expression
cact_code: b
scope: Block_1
parent: 103. multiplicative_expression
children: [
  105. primary_expression
]

105. primary_expression
cact_code: b
scope: Block_1
parent: 104. unary_expression
children: [
  106. left_value
]

106. left_value
cact_code: b
scope: Block_1
parent: 105. primary_expression
children: [
  107. Identifier
]

107. Identifier
cact_code: b
scope: Block_1
parent: 106. left_value
children: []

108. RightParenthesis
cact_code: )
scope: Block_1
parent: 89. unary_expression
children: []

109. Semicolon
cact_code: ;
scope: Block_1
parent: 82. statement
children: []

110. block_item
cact_code: returnc;
scope: Block_1
parent: 71. block
children: [
  111. statement
]

111. statement
cact_code: returnc;
scope: Block_1
parent: 110. block_item
children: [
  112. Return
  113. expression
  120. Semicolon
]

112. Return
cact_code: return
scope: Block_1
parent: 111. statement
children: []

113. expression
cact_code: c
scope: Block_1
parent: 111. statement
children: [
  114. additive_expression
]

114. additive_expression
cact_code: c
scope: Block_1
parent: 113. expression
children: [
  115. multiplicative_expression
]

115. multiplicative_expression
cact_code: c
scope: Block_1
parent: 114. additive_expression
children: [
  116. unary_expression
]

116. unary_expression
cact_code: c
scope: Block_1
parent: 115. multiplicative_expression
children: [
  117. primary_expression
]

117. primary_expression
cact_code: c
scope: Block_1
parent: 116. unary_expression
children: [
  118. left_value
]

118. left_value
cact_code: c
scope: Block_1
parent: 117. primary_expression
children: [
  119. Identifier
]

119. Identifier
cact_code: c
scope: Block_1
parent: 118. left_value
children: []

120. Semicolon
cact_code: ;
scope: Block_1
parent: 111. statement
children: []

121. RightBrace
cact_code: }
scope: Block_1
parent: 71. block
children: []

