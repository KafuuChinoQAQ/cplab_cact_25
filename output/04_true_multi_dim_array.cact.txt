└── intmain(){inta=0;intb[2][2]={1,2,3,4};returna;} (compilation_unit)
    └── intmain(){inta=0;intb[2][2]={1,2,3,4};returna;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {inta=0;intb[2][2]={1,2,3,4};returna;} (block)
            ├── { (LeftBrace)
            ├── inta=0; (block_item)
            │   └── inta=0; (declaration)
            │       └── inta=0; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── a=0 (variable_definition)
            │           │   ├── a (Identifier)
            │           │   ├── = (Equal)
            │           │   └── 0 (constant_initial_value)
            │           │       └── 0 (constant_expression)
            │           │           └── 0 (additive_expression)
            │           │               └── 0 (multiplicative_expression)
            │           │                   └── 0 (unary_expression)
            │           │                       └── 0 (primary_expression)
            │           │                           └── 0 (number)
            │           │                               └── 0 (IntegerConstant)
            │           └── ; (Semicolon)
            ├── intb[2][2]={1,2,3,4}; (block_item)
            │   └── intb[2][2]={1,2,3,4}; (declaration)
            │       └── intb[2][2]={1,2,3,4}; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── b[2][2]={1,2,3,4} (variable_definition)
            │           │   ├── b (Identifier)
            │           │   ├── [ (LeftBracket)
            │           │   ├── 2 (IntegerConstant)
            │           │   ├── ] (RightBracket)
            │           │   ├── [ (LeftBracket)
            │           │   ├── 2 (IntegerConstant)
            │           │   ├── ] (RightBracket)
            │           │   ├── = (Equal)
            │           │   └── {1,2,3,4} (constant_initial_value)
            │           │       ├── { (LeftBrace)
            │           │       ├── 1 (constant_initial_value)
            │           │       │   └── 1 (constant_expression)
            │           │       │       └── 1 (additive_expression)
            │           │       │           └── 1 (multiplicative_expression)
            │           │       │               └── 1 (unary_expression)
            │           │       │                   └── 1 (primary_expression)
            │           │       │                       └── 1 (number)
            │           │       │                           └── 1 (IntegerConstant)
            │           │       ├── , (Comma)
            │           │       ├── 2 (constant_initial_value)
            │           │       │   └── 2 (constant_expression)
            │           │       │       └── 2 (additive_expression)
            │           │       │           └── 2 (multiplicative_expression)
            │           │       │               └── 2 (unary_expression)
            │           │       │                   └── 2 (primary_expression)
            │           │       │                       └── 2 (number)
            │           │       │                           └── 2 (IntegerConstant)
            │           │       ├── , (Comma)
            │           │       ├── 3 (constant_initial_value)
            │           │       │   └── 3 (constant_expression)
            │           │       │       └── 3 (additive_expression)
            │           │       │           └── 3 (multiplicative_expression)
            │           │       │               └── 3 (unary_expression)
            │           │       │                   └── 3 (primary_expression)
            │           │       │                       └── 3 (number)
            │           │       │                           └── 3 (IntegerConstant)
            │           │       ├── , (Comma)
            │           │       ├── 4 (constant_initial_value)
            │           │       │   └── 4 (constant_expression)
            │           │       │       └── 4 (additive_expression)
            │           │       │           └── 4 (multiplicative_expression)
            │           │       │               └── 4 (unary_expression)
            │           │       │                   └── 4 (primary_expression)
            │           │       │                       └── 4 (number)
            │           │       │                           └── 4 (IntegerConstant)
            │           │       └── } (RightBrace)
            │           └── ; (Semicolon)
            ├── returna; (block_item)
            │   └── returna; (statement)
            │       ├── return (Return)
            │       ├── a (expression)
            │       │   └── a (additive_expression)
            │       │       └── a (multiplicative_expression)
            │       │           └── a (unary_expression)
            │       │               └── a (primary_expression)
            │       │                   └── a (left_value)
            │       │                       └── a (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: main (position: 1) (Function, Return Type: int)
Children Scopes: 
  - Block_0

Scope: Block_0
Identifiers: 
  %2: a (position: 14) (Type: int)
  %3: b (position: 31) (Type: int[2][2])
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: intmain(){inta=0;intb[2][2]={1,2,3,4};returna;}
scope: null
parent: null
children: [
  1. function_definition
]

1. function_definition
cact_code: intmain(){inta=0;intb[2][2]={1,2,3,4};returna;}
scope: global
parent: 0. compilation_unit
children: [
  2. function_type
  4. Identifier
  5. LeftParenthesis
  6. RightParenthesis
  7. block
]

2. function_type
cact_code: int
scope: global
parent: 1. function_definition
children: [
  3. Int
]

3. Int
cact_code: int
scope: global
parent: 2. function_type
children: []

4. Identifier
cact_code: main
scope: global
parent: 1. function_definition
children: []

5. LeftParenthesis
cact_code: (
scope: global
parent: 1. function_definition
children: []

6. RightParenthesis
cact_code: )
scope: global
parent: 1. function_definition
children: []

7. block
cact_code: {inta=0;intb[2][2]={1,2,3,4};returna;}
scope: Block_0
parent: 1. function_definition
children: [
  8. LeftBrace
  9. block_item
  26. block_item
  79. block_item
  90. RightBrace
]

8. LeftBrace
cact_code: {
scope: Block_0
parent: 7. block
children: []

9. block_item
cact_code: inta=0;
scope: Block_0
parent: 7. block
children: [
  10. declaration
]

10. declaration
cact_code: inta=0;
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: Block_0
parent: 9. block_item
children: [
  11. variable_declaration
]

11. variable_declaration
cact_code: inta=0;
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: Block_0
parent: 10. declaration
children: [
  12. basic_type
  14. variable_definition
  25. Semicolon
]

12. basic_type
cact_code: int
scope: Block_0
parent: 11. variable_declaration
children: [
  13. Int
]

13. Int
cact_code: int
scope: Block_0
parent: 12. basic_type
children: []

14. variable_definition
cact_code: a=0
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: Block_0
parent: 11. variable_declaration
children: [
  15. Identifier
  16. Equal
  17. constant_initial_value
]

15. Identifier
cact_code: a
scope: Block_0
parent: 14. variable_definition
children: []

16. Equal
cact_code: =
scope: Block_0
parent: 14. variable_definition
children: []

17. constant_initial_value
cact_code: 0
scope: Block_0
parent: 14. variable_definition
children: [
  18. constant_expression
]

18. constant_expression
cact_code: 0
scope: Block_0
parent: 17. constant_initial_value
children: [
  19. additive_expression
]

19. additive_expression
cact_code: 0
scope: Block_0
parent: 18. constant_expression
children: [
  20. multiplicative_expression
]

20. multiplicative_expression
cact_code: 0
scope: Block_0
parent: 19. additive_expression
children: [
  21. unary_expression
]

21. unary_expression
cact_code: 0
scope: Block_0
parent: 20. multiplicative_expression
children: [
  22. primary_expression
]

22. primary_expression
cact_code: 0
scope: Block_0
parent: 21. unary_expression
children: [
  23. number
]

23. number
cact_code: 0
scope: Block_0
parent: 22. primary_expression
children: [
  24. IntegerConstant
]

24. IntegerConstant
cact_code: 0
scope: Block_0
parent: 23. number
children: []

25. Semicolon
cact_code: ;
scope: Block_0
parent: 11. variable_declaration
children: []

26. block_item
cact_code: intb[2][2]={1,2,3,4};
scope: Block_0
parent: 7. block
children: [
  27. declaration
]

27. declaration
cact_code: intb[2][2]={1,2,3,4};
ir_code: 
--------------------
%3 = alloca [2 x [2 x i32]], align 16
--------------------
scope: Block_0
parent: 26. block_item
children: [
  28. variable_declaration
]

28. variable_declaration
cact_code: intb[2][2]={1,2,3,4};
ir_code: 
--------------------
%3 = alloca [2 x [2 x i32]], align 16
--------------------
scope: Block_0
parent: 27. declaration
children: [
  29. basic_type
  31. variable_definition
  78. Semicolon
]

29. basic_type
cact_code: int
scope: Block_0
parent: 28. variable_declaration
children: [
  30. Int
]

30. Int
cact_code: int
scope: Block_0
parent: 29. basic_type
children: []

31. variable_definition
cact_code: b[2][2]={1,2,3,4}
ir_code: 
--------------------
%3 = alloca [2 x [2 x i32]], align 16
--------------------
scope: Block_0
parent: 28. variable_declaration
children: [
  32. Identifier
  33. LeftBracket
  34. IntegerConstant
  35. RightBracket
  36. LeftBracket
  37. IntegerConstant
  38. RightBracket
  39. Equal
  40. constant_initial_value
]

32. Identifier
cact_code: b
scope: Block_0
parent: 31. variable_definition
children: []

33. LeftBracket
cact_code: [
scope: Block_0
parent: 31. variable_definition
children: []

34. IntegerConstant
cact_code: 2
scope: Block_0
parent: 31. variable_definition
children: []

35. RightBracket
cact_code: ]
scope: Block_0
parent: 31. variable_definition
children: []

36. LeftBracket
cact_code: [
scope: Block_0
parent: 31. variable_definition
children: []

37. IntegerConstant
cact_code: 2
scope: Block_0
parent: 31. variable_definition
children: []

38. RightBracket
cact_code: ]
scope: Block_0
parent: 31. variable_definition
children: []

39. Equal
cact_code: =
scope: Block_0
parent: 31. variable_definition
children: []

40. constant_initial_value
cact_code: {1,2,3,4}
scope: Block_0
parent: 31. variable_definition
children: [
  41. LeftBrace
  42. constant_initial_value
  50. Comma
  51. constant_initial_value
  59. Comma
  60. constant_initial_value
  68. Comma
  69. constant_initial_value
  77. RightBrace
]

41. LeftBrace
cact_code: {
scope: Block_0
parent: 40. constant_initial_value
children: []

42. constant_initial_value
cact_code: 1
scope: Block_0
parent: 40. constant_initial_value
children: [
  43. constant_expression
]

43. constant_expression
cact_code: 1
scope: Block_0
parent: 42. constant_initial_value
children: [
  44. additive_expression
]

44. additive_expression
cact_code: 1
scope: Block_0
parent: 43. constant_expression
children: [
  45. multiplicative_expression
]

45. multiplicative_expression
cact_code: 1
scope: Block_0
parent: 44. additive_expression
children: [
  46. unary_expression
]

46. unary_expression
cact_code: 1
scope: Block_0
parent: 45. multiplicative_expression
children: [
  47. primary_expression
]

47. primary_expression
cact_code: 1
scope: Block_0
parent: 46. unary_expression
children: [
  48. number
]

48. number
cact_code: 1
scope: Block_0
parent: 47. primary_expression
children: [
  49. IntegerConstant
]

49. IntegerConstant
cact_code: 1
scope: Block_0
parent: 48. number
children: []

50. Comma
cact_code: ,
scope: Block_0
parent: 40. constant_initial_value
children: []

51. constant_initial_value
cact_code: 2
scope: Block_0
parent: 40. constant_initial_value
children: [
  52. constant_expression
]

52. constant_expression
cact_code: 2
scope: Block_0
parent: 51. constant_initial_value
children: [
  53. additive_expression
]

53. additive_expression
cact_code: 2
scope: Block_0
parent: 52. constant_expression
children: [
  54. multiplicative_expression
]

54. multiplicative_expression
cact_code: 2
scope: Block_0
parent: 53. additive_expression
children: [
  55. unary_expression
]

55. unary_expression
cact_code: 2
scope: Block_0
parent: 54. multiplicative_expression
children: [
  56. primary_expression
]

56. primary_expression
cact_code: 2
scope: Block_0
parent: 55. unary_expression
children: [
  57. number
]

57. number
cact_code: 2
scope: Block_0
parent: 56. primary_expression
children: [
  58. IntegerConstant
]

58. IntegerConstant
cact_code: 2
scope: Block_0
parent: 57. number
children: []

59. Comma
cact_code: ,
scope: Block_0
parent: 40. constant_initial_value
children: []

60. constant_initial_value
cact_code: 3
scope: Block_0
parent: 40. constant_initial_value
children: [
  61. constant_expression
]

61. constant_expression
cact_code: 3
scope: Block_0
parent: 60. constant_initial_value
children: [
  62. additive_expression
]

62. additive_expression
cact_code: 3
scope: Block_0
parent: 61. constant_expression
children: [
  63. multiplicative_expression
]

63. multiplicative_expression
cact_code: 3
scope: Block_0
parent: 62. additive_expression
children: [
  64. unary_expression
]

64. unary_expression
cact_code: 3
scope: Block_0
parent: 63. multiplicative_expression
children: [
  65. primary_expression
]

65. primary_expression
cact_code: 3
scope: Block_0
parent: 64. unary_expression
children: [
  66. number
]

66. number
cact_code: 3
scope: Block_0
parent: 65. primary_expression
children: [
  67. IntegerConstant
]

67. IntegerConstant
cact_code: 3
scope: Block_0
parent: 66. number
children: []

68. Comma
cact_code: ,
scope: Block_0
parent: 40. constant_initial_value
children: []

69. constant_initial_value
cact_code: 4
scope: Block_0
parent: 40. constant_initial_value
children: [
  70. constant_expression
]

70. constant_expression
cact_code: 4
scope: Block_0
parent: 69. constant_initial_value
children: [
  71. additive_expression
]

71. additive_expression
cact_code: 4
scope: Block_0
parent: 70. constant_expression
children: [
  72. multiplicative_expression
]

72. multiplicative_expression
cact_code: 4
scope: Block_0
parent: 71. additive_expression
children: [
  73. unary_expression
]

73. unary_expression
cact_code: 4
scope: Block_0
parent: 72. multiplicative_expression
children: [
  74. primary_expression
]

74. primary_expression
cact_code: 4
scope: Block_0
parent: 73. unary_expression
children: [
  75. number
]

75. number
cact_code: 4
scope: Block_0
parent: 74. primary_expression
children: [
  76. IntegerConstant
]

76. IntegerConstant
cact_code: 4
scope: Block_0
parent: 75. number
children: []

77. RightBrace
cact_code: }
scope: Block_0
parent: 40. constant_initial_value
children: []

78. Semicolon
cact_code: ;
scope: Block_0
parent: 28. variable_declaration
children: []

79. block_item
cact_code: returna;
scope: Block_0
parent: 7. block
children: [
  80. statement
]

80. statement
cact_code: returna;
scope: Block_0
parent: 79. block_item
children: [
  81. Return
  82. expression
  89. Semicolon
]

81. Return
cact_code: return
scope: Block_0
parent: 80. statement
children: []

82. expression
cact_code: a
scope: Block_0
parent: 80. statement
children: [
  83. additive_expression
]

83. additive_expression
cact_code: a
scope: Block_0
parent: 82. expression
children: [
  84. multiplicative_expression
]

84. multiplicative_expression
cact_code: a
scope: Block_0
parent: 83. additive_expression
children: [
  85. unary_expression
]

85. unary_expression
cact_code: a
scope: Block_0
parent: 84. multiplicative_expression
children: [
  86. primary_expression
]

86. primary_expression
cact_code: a
scope: Block_0
parent: 85. unary_expression
children: [
  87. left_value
]

87. left_value
cact_code: a
scope: Block_0
parent: 86. primary_expression
children: [
  88. Identifier
]

88. Identifier
cact_code: a
scope: Block_0
parent: 87. left_value
children: []

89. Semicolon
cact_code: ;
scope: Block_0
parent: 80. statement
children: []

90. RightBrace
cact_code: }
scope: Block_0
parent: 7. block
children: []

