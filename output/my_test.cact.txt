└── constinta=1;voidfoo(intb){intc;floatb;} (compilation_unit)
    ├── constinta=1; (declaration)
    │   └── constinta=1; (constant_declaration)
    │       ├── const (Const)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a=1 (constant_definition)
    │       │   ├── a (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 1 (constant_initial_value)
    │       │       └── 1 (constant_expression)
    │       │           └── 1 (additive_expression)
    │       │               └── 1 (multiplicative_expression)
    │       │                   └── 1 (unary_expression)
    │       │                       └── 1 (primary_expression)
    │       │                           └── 1 (number)
    │       │                               └── 1 (IntegerConstant)
    │       └── ; (Semicolon)
    └── voidfoo(intb){intc;floatb;} (function_definition)
        ├── void (function_type)
        │   └── void (Void)
        ├── foo (Identifier)
        ├── ( (LeftParenthesis)
        ├── intb (function_formal_params)
        │   └── intb (function_formal_param)
        │       ├── int (basic_type)
        │       │   └── int (Int)
        │       └── b (Identifier)
        ├── ) (RightParenthesis)
        └── {intc;floatb;} (block)
            ├── { (LeftBrace)
            ├── intc; (block_item)
            │   └── intc; (declaration)
            │       └── intc; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── c (variable_definition)
            │           │   └── c (Identifier)
            │           └── ; (Semicolon)
            ├── floatb; (block_item)
            │   └── floatb; (declaration)
            │       └── floatb; (variable_declaration)
            │           ├── float (basic_type)
            │           │   └── float (Float)
            │           ├── b (variable_definition)
            │           │   └── b (Identifier)
            │           └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 6) (Type: int)
  %2: foo (position: 18) (Function, Return Type: void) [Params: b (int), ]
Children Scopes: 
  - Block_0

Scope: Block_0
Identifiers: 
  %3: c (position: 36) (Type: int)
  %4: b (position: 44) (Type: float)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: constinta=1;voidfoo(intb){intc;floatb;}
scope: null
parent: null
children: [
  1. declaration
  18. function_definition
]

1. declaration
cact_code: constinta=1;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. constant_declaration
]

2. constant_declaration
cact_code: constinta=1;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 1. declaration
children: [
  3. Const
  4. basic_type
  6. constant_definition
  17. Semicolon
]

3. Const
cact_code: const
scope: global
parent: 2. constant_declaration
children: []

4. basic_type
cact_code: int
scope: global
parent: 2. constant_declaration
children: [
  5. Int
]

5. Int
cact_code: int
scope: global
parent: 4. basic_type
children: []

6. constant_definition
cact_code: a=1
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 2. constant_declaration
children: [
  7. Identifier
  8. Equal
  9. constant_initial_value
]

7. Identifier
cact_code: a
scope: global
parent: 6. constant_definition
children: []

8. Equal
cact_code: =
scope: global
parent: 6. constant_definition
children: []

9. constant_initial_value
cact_code: 1
scope: global
parent: 6. constant_definition
children: [
  10. constant_expression
]

10. constant_expression
cact_code: 1
scope: global
parent: 9. constant_initial_value
children: [
  11. additive_expression
]

11. additive_expression
cact_code: 1
scope: global
parent: 10. constant_expression
children: [
  12. multiplicative_expression
]

12. multiplicative_expression
cact_code: 1
scope: global
parent: 11. additive_expression
children: [
  13. unary_expression
]

13. unary_expression
cact_code: 1
scope: global
parent: 12. multiplicative_expression
children: [
  14. primary_expression
]

14. primary_expression
cact_code: 1
scope: global
parent: 13. unary_expression
children: [
  15. number
]

15. number
cact_code: 1
scope: global
parent: 14. primary_expression
children: [
  16. IntegerConstant
]

16. IntegerConstant
cact_code: 1
scope: global
parent: 15. number
children: []

17. Semicolon
cact_code: ;
scope: global
parent: 2. constant_declaration
children: []

18. function_definition
cact_code: voidfoo(intb){intc;floatb;}
scope: global
parent: 0. compilation_unit
children: [
  19. function_type
  21. Identifier
  22. LeftParenthesis
  23. function_formal_params
  28. RightParenthesis
  29. block
]

19. function_type
cact_code: void
scope: global
parent: 18. function_definition
children: [
  20. Void
]

20. Void
cact_code: void
scope: global
parent: 19. function_type
children: []

21. Identifier
cact_code: foo
scope: global
parent: 18. function_definition
children: []

22. LeftParenthesis
cact_code: (
scope: global
parent: 18. function_definition
children: []

23. function_formal_params
cact_code: intb
scope: global
parent: 18. function_definition
children: [
  24. function_formal_param
]

24. function_formal_param
cact_code: intb
scope: global
parent: 23. function_formal_params
children: [
  25. basic_type
  27. Identifier
]

25. basic_type
cact_code: int
scope: global
parent: 24. function_formal_param
children: [
  26. Int
]

26. Int
cact_code: int
scope: global
parent: 25. basic_type
children: []

27. Identifier
cact_code: b
scope: global
parent: 24. function_formal_param
children: []

28. RightParenthesis
cact_code: )
scope: global
parent: 18. function_definition
children: []

29. block
cact_code: {intc;floatb;}
scope: Block_0
parent: 18. function_definition
children: [
  30. LeftBrace
  31. block_item
  39. block_item
  47. RightBrace
]

30. LeftBrace
cact_code: {
scope: Block_0
parent: 29. block
children: []

31. block_item
cact_code: intc;
scope: Block_0
parent: 29. block
children: [
  32. declaration
]

32. declaration
cact_code: intc;
ir_code: 
--------------------
%3 = alloca i32, align 4
store i32 0, ptr %3, align 4
--------------------
scope: Block_0
parent: 31. block_item
children: [
  33. variable_declaration
]

33. variable_declaration
cact_code: intc;
ir_code: 
--------------------
%3 = alloca i32, align 4
store i32 0, ptr %3, align 4
--------------------
scope: Block_0
parent: 32. declaration
children: [
  34. basic_type
  36. variable_definition
  38. Semicolon
]

34. basic_type
cact_code: int
scope: Block_0
parent: 33. variable_declaration
children: [
  35. Int
]

35. Int
cact_code: int
scope: Block_0
parent: 34. basic_type
children: []

36. variable_definition
cact_code: c
ir_code: 
--------------------
%3 = alloca i32, align 4
store i32 0, ptr %3, align 4
--------------------
scope: Block_0
parent: 33. variable_declaration
children: [
  37. Identifier
]

37. Identifier
cact_code: c
scope: Block_0
parent: 36. variable_definition
children: []

38. Semicolon
cact_code: ;
scope: Block_0
parent: 33. variable_declaration
children: []

39. block_item
cact_code: floatb;
scope: Block_0
parent: 29. block
children: [
  40. declaration
]

40. declaration
cact_code: floatb;
ir_code: 
--------------------
%4 = alloca float, align 4
store float 0.0, ptr %4, align 4
--------------------
scope: Block_0
parent: 39. block_item
children: [
  41. variable_declaration
]

41. variable_declaration
cact_code: floatb;
ir_code: 
--------------------
%4 = alloca float, align 4
store float 0.0, ptr %4, align 4
--------------------
scope: Block_0
parent: 40. declaration
children: [
  42. basic_type
  44. variable_definition
  46. Semicolon
]

42. basic_type
cact_code: float
scope: Block_0
parent: 41. variable_declaration
children: [
  43. Float
]

43. Float
cact_code: float
scope: Block_0
parent: 42. basic_type
children: []

44. variable_definition
cact_code: b
ir_code: 
--------------------
%4 = alloca float, align 4
store float 0.0, ptr %4, align 4
--------------------
scope: Block_0
parent: 41. variable_declaration
children: [
  45. Identifier
]

45. Identifier
cact_code: b
scope: Block_0
parent: 44. variable_definition
children: []

46. Semicolon
cact_code: ;
scope: Block_0
parent: 41. variable_declaration
children: []

47. RightBrace
cact_code: }
scope: Block_0
parent: 29. block
children: []

