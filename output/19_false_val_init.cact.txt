└── inta=2;constintb=3;intmain(){intc=b;returnc;} (compilation_unit)
    ├── inta=2; (declaration)
    │   └── inta=2; (variable_declaration)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a=2 (variable_definition)
    │       │   ├── a (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 2 (constant_initial_value)
    │       │       └── 2 (constant_expression)
    │       │           └── 2 (additive_expression)
    │       │               └── 2 (multiplicative_expression)
    │       │                   └── 2 (unary_expression)
    │       │                       └── 2 (primary_expression)
    │       │                           └── 2 (number)
    │       │                               └── 2 (IntegerConstant)
    │       └── ; (Semicolon)
    ├── constintb=3; (declaration)
    │   └── constintb=3; (constant_declaration)
    │       ├── const (Const)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── b=3 (constant_definition)
    │       │   ├── b (Identifier)
    │       │   ├── = (Equal)
    │       │   └── 3 (constant_initial_value)
    │       │       └── 3 (constant_expression)
    │       │           └── 3 (additive_expression)
    │       │               └── 3 (multiplicative_expression)
    │       │                   └── 3 (unary_expression)
    │       │                       └── 3 (primary_expression)
    │       │                           └── 3 (number)
    │       │                               └── 3 (IntegerConstant)
    │       └── ; (Semicolon)
    └── intmain(){intc=b;returnc;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {intc=b;returnc;} (block)
            ├── { (LeftBrace)
            ├── intc=b; (block_item)
            │   └── intc=b; (declaration)
            │       └── intc=b; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── c=b (variable_definition)
            │           │   ├── c (Identifier)
            │           │   ├── = (Equal)
            │           │   └── b (constant_initial_value)
            │           │       └── b (constant_expression)
            │           │           └── b (additive_expression)
            │           │               └── b (multiplicative_expression)
            │           │                   └── b (unary_expression)
            │           │                       └── b (primary_expression)
            │           │                           └── b (left_value)
            │           │                               └── b (Identifier)
            │           └── ; (Semicolon)
            ├── returnc; (block_item)
            │   └── returnc; (statement)
            │       ├── return (Return)
            │       ├── c (expression)
            │       │   └── c (additive_expression)
            │       │       └── c (multiplicative_expression)
            │       │           └── c (unary_expression)
            │       │               └── c (primary_expression)
            │       │                   └── c (left_value)
            │       │                       └── c (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 5) (Type: int)
  %2: b (position: 22) (Type: int)
  %3: main (position: 34) (Function, Return Type: int)
Children Scopes: 
  - Block_0

Scope: Block_0
Identifiers: 
  %4: c (position: 47) (Type: int)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: inta=2;constintb=3;intmain(){intc=b;returnc;}
scope: null
parent: null
children: [
  1. declaration
  17. declaration
  34. function_definition
]

1. declaration
cact_code: inta=2;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. variable_declaration
]

2. variable_declaration
cact_code: inta=2;
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 1. declaration
children: [
  3. basic_type
  5. variable_definition
  16. Semicolon
]

3. basic_type
cact_code: int
scope: global
parent: 2. variable_declaration
children: [
  4. Int
]

4. Int
cact_code: int
scope: global
parent: 3. basic_type
children: []

5. variable_definition
cact_code: a=2
ir_code: 
--------------------
%1 = alloca i32, align 4
--------------------
scope: global
parent: 2. variable_declaration
children: [
  6. Identifier
  7. Equal
  8. constant_initial_value
]

6. Identifier
cact_code: a
scope: global
parent: 5. variable_definition
children: []

7. Equal
cact_code: =
scope: global
parent: 5. variable_definition
children: []

8. constant_initial_value
cact_code: 2
scope: global
parent: 5. variable_definition
children: [
  9. constant_expression
]

9. constant_expression
cact_code: 2
scope: global
parent: 8. constant_initial_value
children: [
  10. additive_expression
]

10. additive_expression
cact_code: 2
scope: global
parent: 9. constant_expression
children: [
  11. multiplicative_expression
]

11. multiplicative_expression
cact_code: 2
scope: global
parent: 10. additive_expression
children: [
  12. unary_expression
]

12. unary_expression
cact_code: 2
scope: global
parent: 11. multiplicative_expression
children: [
  13. primary_expression
]

13. primary_expression
cact_code: 2
scope: global
parent: 12. unary_expression
children: [
  14. number
]

14. number
cact_code: 2
scope: global
parent: 13. primary_expression
children: [
  15. IntegerConstant
]

15. IntegerConstant
cact_code: 2
scope: global
parent: 14. number
children: []

16. Semicolon
cact_code: ;
scope: global
parent: 2. variable_declaration
children: []

17. declaration
cact_code: constintb=3;
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: global
parent: 0. compilation_unit
children: [
  18. constant_declaration
]

18. constant_declaration
cact_code: constintb=3;
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: global
parent: 17. declaration
children: [
  19. Const
  20. basic_type
  22. constant_definition
  33. Semicolon
]

19. Const
cact_code: const
scope: global
parent: 18. constant_declaration
children: []

20. basic_type
cact_code: int
scope: global
parent: 18. constant_declaration
children: [
  21. Int
]

21. Int
cact_code: int
scope: global
parent: 20. basic_type
children: []

22. constant_definition
cact_code: b=3
ir_code: 
--------------------
%2 = alloca i32, align 4
--------------------
scope: global
parent: 18. constant_declaration
children: [
  23. Identifier
  24. Equal
  25. constant_initial_value
]

23. Identifier
cact_code: b
scope: global
parent: 22. constant_definition
children: []

24. Equal
cact_code: =
scope: global
parent: 22. constant_definition
children: []

25. constant_initial_value
cact_code: 3
scope: global
parent: 22. constant_definition
children: [
  26. constant_expression
]

26. constant_expression
cact_code: 3
scope: global
parent: 25. constant_initial_value
children: [
  27. additive_expression
]

27. additive_expression
cact_code: 3
scope: global
parent: 26. constant_expression
children: [
  28. multiplicative_expression
]

28. multiplicative_expression
cact_code: 3
scope: global
parent: 27. additive_expression
children: [
  29. unary_expression
]

29. unary_expression
cact_code: 3
scope: global
parent: 28. multiplicative_expression
children: [
  30. primary_expression
]

30. primary_expression
cact_code: 3
scope: global
parent: 29. unary_expression
children: [
  31. number
]

31. number
cact_code: 3
scope: global
parent: 30. primary_expression
children: [
  32. IntegerConstant
]

32. IntegerConstant
cact_code: 3
scope: global
parent: 31. number
children: []

33. Semicolon
cact_code: ;
scope: global
parent: 18. constant_declaration
children: []

34. function_definition
cact_code: intmain(){intc=b;returnc;}
scope: global
parent: 0. compilation_unit
children: [
  35. function_type
  37. Identifier
  38. LeftParenthesis
  39. RightParenthesis
  40. block
]

35. function_type
cact_code: int
scope: global
parent: 34. function_definition
children: [
  36. Int
]

36. Int
cact_code: int
scope: global
parent: 35. function_type
children: []

37. Identifier
cact_code: main
scope: global
parent: 34. function_definition
children: []

38. LeftParenthesis
cact_code: (
scope: global
parent: 34. function_definition
children: []

39. RightParenthesis
cact_code: )
scope: global
parent: 34. function_definition
children: []

40. block
cact_code: {intc=b;returnc;}
scope: Block_0
parent: 34. function_definition
children: [
  41. LeftBrace
  42. block_item
  59. block_item
  70. RightBrace
]

41. LeftBrace
cact_code: {
scope: Block_0
parent: 40. block
children: []

42. block_item
cact_code: intc=b;
scope: Block_0
parent: 40. block
children: [
  43. declaration
]

43. declaration
cact_code: intc=b;
ir_code: 
--------------------
%4 = alloca i32, align 4
--------------------
scope: Block_0
parent: 42. block_item
children: [
  44. variable_declaration
]

44. variable_declaration
cact_code: intc=b;
ir_code: 
--------------------
%4 = alloca i32, align 4
--------------------
scope: Block_0
parent: 43. declaration
children: [
  45. basic_type
  47. variable_definition
  58. Semicolon
]

45. basic_type
cact_code: int
scope: Block_0
parent: 44. variable_declaration
children: [
  46. Int
]

46. Int
cact_code: int
scope: Block_0
parent: 45. basic_type
children: []

47. variable_definition
cact_code: c=b
ir_code: 
--------------------
%4 = alloca i32, align 4
--------------------
scope: Block_0
parent: 44. variable_declaration
children: [
  48. Identifier
  49. Equal
  50. constant_initial_value
]

48. Identifier
cact_code: c
scope: Block_0
parent: 47. variable_definition
children: []

49. Equal
cact_code: =
scope: Block_0
parent: 47. variable_definition
children: []

50. constant_initial_value
cact_code: b
scope: Block_0
parent: 47. variable_definition
children: [
  51. constant_expression
]

51. constant_expression
cact_code: b
scope: Block_0
parent: 50. constant_initial_value
children: [
  52. additive_expression
]

52. additive_expression
cact_code: b
scope: Block_0
parent: 51. constant_expression
children: [
  53. multiplicative_expression
]

53. multiplicative_expression
cact_code: b
scope: Block_0
parent: 52. additive_expression
children: [
  54. unary_expression
]

54. unary_expression
cact_code: b
scope: Block_0
parent: 53. multiplicative_expression
children: [
  55. primary_expression
]

55. primary_expression
cact_code: b
scope: Block_0
parent: 54. unary_expression
children: [
  56. left_value
]

56. left_value
cact_code: b
scope: Block_0
parent: 55. primary_expression
children: [
  57. Identifier
]

57. Identifier
cact_code: b
scope: Block_0
parent: 56. left_value
children: []

58. Semicolon
cact_code: ;
scope: Block_0
parent: 44. variable_declaration
children: []

59. block_item
cact_code: returnc;
scope: Block_0
parent: 40. block
children: [
  60. statement
]

60. statement
cact_code: returnc;
scope: Block_0
parent: 59. block_item
children: [
  61. Return
  62. expression
  69. Semicolon
]

61. Return
cact_code: return
scope: Block_0
parent: 60. statement
children: []

62. expression
cact_code: c
scope: Block_0
parent: 60. statement
children: [
  63. additive_expression
]

63. additive_expression
cact_code: c
scope: Block_0
parent: 62. expression
children: [
  64. multiplicative_expression
]

64. multiplicative_expression
cact_code: c
scope: Block_0
parent: 63. additive_expression
children: [
  65. unary_expression
]

65. unary_expression
cact_code: c
scope: Block_0
parent: 64. multiplicative_expression
children: [
  66. primary_expression
]

66. primary_expression
cact_code: c
scope: Block_0
parent: 65. unary_expression
children: [
  67. left_value
]

67. left_value
cact_code: c
scope: Block_0
parent: 66. primary_expression
children: [
  68. Identifier
]

68. Identifier
cact_code: c
scope: Block_0
parent: 67. left_value
children: []

69. Semicolon
cact_code: ;
scope: Block_0
parent: 60. statement
children: []

70. RightBrace
cact_code: }
scope: Block_0
parent: 40. block
children: []

