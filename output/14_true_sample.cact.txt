└── inta[4]={};intmain(){inti,j;i=i+1;j=get_int();returni;} (compilation_unit)
    ├── inta[4]={}; (declaration)
    │   └── inta[4]={}; (variable_declaration)
    │       ├── int (basic_type)
    │       │   └── int (Int)
    │       ├── a[4]={} (variable_definition)
    │       │   ├── a (Identifier)
    │       │   ├── [ (LeftBracket)
    │       │   ├── 4 (IntegerConstant)
    │       │   ├── ] (RightBracket)
    │       │   ├── = (Equal)
    │       │   └── {} (constant_initial_value)
    │       │       ├── { (LeftBrace)
    │       │       └── } (RightBrace)
    │       └── ; (Semicolon)
    └── intmain(){inti,j;i=i+1;j=get_int();returni;} (function_definition)
        ├── int (function_type)
        │   └── int (Int)
        ├── main (Identifier)
        ├── ( (LeftParenthesis)
        ├── ) (RightParenthesis)
        └── {inti,j;i=i+1;j=get_int();returni;} (block)
            ├── { (LeftBrace)
            ├── inti,j; (block_item)
            │   └── inti,j; (declaration)
            │       └── inti,j; (variable_declaration)
            │           ├── int (basic_type)
            │           │   └── int (Int)
            │           ├── i (variable_definition)
            │           │   └── i (Identifier)
            │           ├── , (Comma)
            │           ├── j (variable_definition)
            │           │   └── j (Identifier)
            │           └── ; (Semicolon)
            ├── i=i+1; (block_item)
            │   └── i=i+1; (statement)
            │       ├── i (left_value)
            │       │   └── i (Identifier)
            │       ├── = (Equal)
            │       ├── i+1 (expression)
            │       │   └── i+1 (additive_expression)
            │       │       ├── i (additive_expression)
            │       │       │   └── i (multiplicative_expression)
            │       │       │       └── i (unary_expression)
            │       │       │           └── i (primary_expression)
            │       │       │               └── i (left_value)
            │       │       │                   └── i (Identifier)
            │       │       ├── + (Plus)
            │       │       └── 1 (multiplicative_expression)
            │       │           └── 1 (unary_expression)
            │       │               └── 1 (primary_expression)
            │       │                   └── 1 (number)
            │       │                       └── 1 (IntegerConstant)
            │       └── ; (Semicolon)
            ├── j=get_int(); (block_item)
            │   └── j=get_int(); (statement)
            │       ├── j (left_value)
            │       │   └── j (Identifier)
            │       ├── = (Equal)
            │       ├── get_int() (expression)
            │       │   └── get_int() (additive_expression)
            │       │       └── get_int() (multiplicative_expression)
            │       │           └── get_int() (unary_expression)
            │       │               ├── get_int (Identifier)
            │       │               ├── ( (LeftParenthesis)
            │       │               └── ) (RightParenthesis)
            │       └── ; (Semicolon)
            ├── returni; (block_item)
            │   └── returni; (statement)
            │       ├── return (Return)
            │       ├── i (expression)
            │       │   └── i (additive_expression)
            │       │       └── i (multiplicative_expression)
            │       │           └── i (unary_expression)
            │       │               └── i (primary_expression)
            │       │                   └── i (left_value)
            │       │                       └── i (Identifier)
            │       └── ; (Semicolon)
            └── } (RightBrace)

Variable Scope Tree:
Scope: global
Identifiers: 
  %1: a (position: 5) (Type: int[4])
  %2: main (position: 15) (Function, Return Type: int)
Children Scopes: 
  - Block_0

Scope: Block_0
Identifiers: 
  %3: i (position: 28) (Type: int)
  %4: j (position: 31) (Type: int)
Children Scopes: 


Abstract Syntax Tree (AST):
0. compilation_unit
cact_code: inta[4]={};intmain(){inti,j;i=i+1;j=get_int();returni;}
scope: null
parent: null
children: [
  1. declaration
  15. function_definition
]

1. declaration
cact_code: inta[4]={};
ir_code: 
--------------------
%1 = alloca [4 x i32], align 16
--------------------
scope: global
parent: 0. compilation_unit
children: [
  2. variable_declaration
]

2. variable_declaration
cact_code: inta[4]={};
ir_code: 
--------------------
%1 = alloca [4 x i32], align 16
--------------------
scope: global
parent: 1. declaration
children: [
  3. basic_type
  5. variable_definition
  14. Semicolon
]

3. basic_type
cact_code: int
scope: global
parent: 2. variable_declaration
children: [
  4. Int
]

4. Int
cact_code: int
scope: global
parent: 3. basic_type
children: []

5. variable_definition
cact_code: a[4]={}
ir_code: 
--------------------
%1 = alloca [4 x i32], align 16
--------------------
scope: global
parent: 2. variable_declaration
children: [
  6. Identifier
  7. LeftBracket
  8. IntegerConstant
  9. RightBracket
  10. Equal
  11. constant_initial_value
]

6. Identifier
cact_code: a
scope: global
parent: 5. variable_definition
children: []

7. LeftBracket
cact_code: [
scope: global
parent: 5. variable_definition
children: []

8. IntegerConstant
cact_code: 4
scope: global
parent: 5. variable_definition
children: []

9. RightBracket
cact_code: ]
scope: global
parent: 5. variable_definition
children: []

10. Equal
cact_code: =
scope: global
parent: 5. variable_definition
children: []

11. constant_initial_value
cact_code: {}
scope: global
parent: 5. variable_definition
children: [
  12. LeftBrace
  13. RightBrace
]

12. LeftBrace
cact_code: {
scope: global
parent: 11. constant_initial_value
children: []

13. RightBrace
cact_code: }
scope: global
parent: 11. constant_initial_value
children: []

14. Semicolon
cact_code: ;
scope: global
parent: 2. variable_declaration
children: []

15. function_definition
cact_code: intmain(){inti,j;i=i+1;j=get_int();returni;}
scope: global
parent: 0. compilation_unit
children: [
  16. function_type
  18. Identifier
  19. LeftParenthesis
  20. RightParenthesis
  21. block
]

16. function_type
cact_code: int
scope: global
parent: 15. function_definition
children: [
  17. Int
]

17. Int
cact_code: int
scope: global
parent: 16. function_type
children: []

18. Identifier
cact_code: main
scope: global
parent: 15. function_definition
children: []

19. LeftParenthesis
cact_code: (
scope: global
parent: 15. function_definition
children: []

20. RightParenthesis
cact_code: )
scope: global
parent: 15. function_definition
children: []

21. block
cact_code: {inti,j;i=i+1;j=get_int();returni;}
scope: Block_0
parent: 15. function_definition
children: [
  22. LeftBrace
  23. block_item
  34. block_item
  54. block_item
  67. block_item
  78. RightBrace
]

22. LeftBrace
cact_code: {
scope: Block_0
parent: 21. block
children: []

23. block_item
cact_code: inti,j;
scope: Block_0
parent: 21. block
children: [
  24. declaration
]

24. declaration
cact_code: inti,j;
ir_code: 
--------------------
%3 = alloca i32, align 4
store i32 0, ptr %3, align 4
%4 = alloca i32, align 4
store i32 0, ptr %4, align 4
--------------------
scope: Block_0
parent: 23. block_item
children: [
  25. variable_declaration
]

25. variable_declaration
cact_code: inti,j;
ir_code: 
--------------------
%3 = alloca i32, align 4
store i32 0, ptr %3, align 4
%4 = alloca i32, align 4
store i32 0, ptr %4, align 4
--------------------
scope: Block_0
parent: 24. declaration
children: [
  26. basic_type
  28. variable_definition
  30. Comma
  31. variable_definition
  33. Semicolon
]

26. basic_type
cact_code: int
scope: Block_0
parent: 25. variable_declaration
children: [
  27. Int
]

27. Int
cact_code: int
scope: Block_0
parent: 26. basic_type
children: []

28. variable_definition
cact_code: i
ir_code: 
--------------------
%3 = alloca i32, align 4
store i32 0, ptr %3, align 4
--------------------
scope: Block_0
parent: 25. variable_declaration
children: [
  29. Identifier
]

29. Identifier
cact_code: i
scope: Block_0
parent: 28. variable_definition
children: []

30. Comma
cact_code: ,
scope: Block_0
parent: 25. variable_declaration
children: []

31. variable_definition
cact_code: j
ir_code: 
--------------------
%4 = alloca i32, align 4
store i32 0, ptr %4, align 4
--------------------
scope: Block_0
parent: 25. variable_declaration
children: [
  32. Identifier
]

32. Identifier
cact_code: j
scope: Block_0
parent: 31. variable_definition
children: []

33. Semicolon
cact_code: ;
scope: Block_0
parent: 25. variable_declaration
children: []

34. block_item
cact_code: i=i+1;
scope: Block_0
parent: 21. block
children: [
  35. statement
]

35. statement
cact_code: i=i+1;
scope: Block_0
parent: 34. block_item
children: [
  36. left_value
  38. Equal
  39. expression
  53. Semicolon
]

36. left_value
cact_code: i
scope: Block_0
parent: 35. statement
children: [
  37. Identifier
]

37. Identifier
cact_code: i
scope: Block_0
parent: 36. left_value
children: []

38. Equal
cact_code: =
scope: Block_0
parent: 35. statement
children: []

39. expression
cact_code: i+1
scope: Block_0
parent: 35. statement
children: [
  40. additive_expression
]

40. additive_expression
cact_code: i+1
scope: Block_0
parent: 39. expression
children: [
  41. additive_expression
  47. Plus
  48. multiplicative_expression
]

41. additive_expression
cact_code: i
scope: Block_0
parent: 40. additive_expression
children: [
  42. multiplicative_expression
]

42. multiplicative_expression
cact_code: i
scope: Block_0
parent: 41. additive_expression
children: [
  43. unary_expression
]

43. unary_expression
cact_code: i
scope: Block_0
parent: 42. multiplicative_expression
children: [
  44. primary_expression
]

44. primary_expression
cact_code: i
scope: Block_0
parent: 43. unary_expression
children: [
  45. left_value
]

45. left_value
cact_code: i
scope: Block_0
parent: 44. primary_expression
children: [
  46. Identifier
]

46. Identifier
cact_code: i
scope: Block_0
parent: 45. left_value
children: []

47. Plus
cact_code: +
scope: Block_0
parent: 40. additive_expression
children: []

48. multiplicative_expression
cact_code: 1
scope: Block_0
parent: 40. additive_expression
children: [
  49. unary_expression
]

49. unary_expression
cact_code: 1
scope: Block_0
parent: 48. multiplicative_expression
children: [
  50. primary_expression
]

50. primary_expression
cact_code: 1
scope: Block_0
parent: 49. unary_expression
children: [
  51. number
]

51. number
cact_code: 1
scope: Block_0
parent: 50. primary_expression
children: [
  52. IntegerConstant
]

52. IntegerConstant
cact_code: 1
scope: Block_0
parent: 51. number
children: []

53. Semicolon
cact_code: ;
scope: Block_0
parent: 35. statement
children: []

54. block_item
cact_code: j=get_int();
scope: Block_0
parent: 21. block
children: [
  55. statement
]

55. statement
cact_code: j=get_int();
scope: Block_0
parent: 54. block_item
children: [
  56. left_value
  58. Equal
  59. expression
  66. Semicolon
]

56. left_value
cact_code: j
scope: Block_0
parent: 55. statement
children: [
  57. Identifier
]

57. Identifier
cact_code: j
scope: Block_0
parent: 56. left_value
children: []

58. Equal
cact_code: =
scope: Block_0
parent: 55. statement
children: []

59. expression
cact_code: get_int()
scope: Block_0
parent: 55. statement
children: [
  60. additive_expression
]

60. additive_expression
cact_code: get_int()
scope: Block_0
parent: 59. expression
children: [
  61. multiplicative_expression
]

61. multiplicative_expression
cact_code: get_int()
scope: Block_0
parent: 60. additive_expression
children: [
  62. unary_expression
]

62. unary_expression
cact_code: get_int()
scope: Block_0
parent: 61. multiplicative_expression
children: [
  63. Identifier
  64. LeftParenthesis
  65. RightParenthesis
]

63. Identifier
cact_code: get_int
scope: Block_0
parent: 62. unary_expression
children: []

64. LeftParenthesis
cact_code: (
scope: Block_0
parent: 62. unary_expression
children: []

65. RightParenthesis
cact_code: )
scope: Block_0
parent: 62. unary_expression
children: []

66. Semicolon
cact_code: ;
scope: Block_0
parent: 55. statement
children: []

67. block_item
cact_code: returni;
scope: Block_0
parent: 21. block
children: [
  68. statement
]

68. statement
cact_code: returni;
scope: Block_0
parent: 67. block_item
children: [
  69. Return
  70. expression
  77. Semicolon
]

69. Return
cact_code: return
scope: Block_0
parent: 68. statement
children: []

70. expression
cact_code: i
scope: Block_0
parent: 68. statement
children: [
  71. additive_expression
]

71. additive_expression
cact_code: i
scope: Block_0
parent: 70. expression
children: [
  72. multiplicative_expression
]

72. multiplicative_expression
cact_code: i
scope: Block_0
parent: 71. additive_expression
children: [
  73. unary_expression
]

73. unary_expression
cact_code: i
scope: Block_0
parent: 72. multiplicative_expression
children: [
  74. primary_expression
]

74. primary_expression
cact_code: i
scope: Block_0
parent: 73. unary_expression
children: [
  75. left_value
]

75. left_value
cact_code: i
scope: Block_0
parent: 74. primary_expression
children: [
  76. Identifier
]

76. Identifier
cact_code: i
scope: Block_0
parent: 75. left_value
children: []

77. Semicolon
cact_code: ;
scope: Block_0
parent: 68. statement
children: []

78. RightBrace
cact_code: }
scope: Block_0
parent: 21. block
children: []

